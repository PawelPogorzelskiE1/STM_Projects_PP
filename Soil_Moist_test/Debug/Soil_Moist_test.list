
Soil_Moist_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ec8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005058  08005058  00015058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e8  080050e8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080050e8  080050e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050f0  080050f0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f0  080050f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080050f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000007c  08005174  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08005174  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0d4  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eae  00000000  00000000  0002f180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00031030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  00031cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027cfc  00000000  00000000  000328a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0d6  00000000  00000000  0005a5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fca0c  00000000  00000000  0006767a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00164086  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003844  00000000  00000000  001640dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005040 	.word	0x08005040

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005040 	.word	0x08005040

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08e      	sub	sp, #56	; 0x38
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fbd5 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f86b 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f997 	bl	80008b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f965 	bl	8000858 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800058e:	f000 f8ed 	bl	800076c <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // set GPIO High
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f002 f8f8 	bl	8002790 <HAL_GPIO_WritePin>
	  // Get ADC Value
	  HAL_ADC_Start(&hadc1);
 80005a0:	4827      	ldr	r0, [pc, #156]	; (8000640 <main+0xc8>)
 80005a2:	f000 ff9d 	bl	80014e0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005a6:	f04f 31ff 	mov.w	r1, #4294967295
 80005aa:	4825      	ldr	r0, [pc, #148]	; (8000640 <main+0xc8>)
 80005ac:	f001 f852 	bl	8001654 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 80005b0:	4823      	ldr	r0, [pc, #140]	; (8000640 <main+0xc8>)
 80005b2:	f001 f927 	bl	8001804 <HAL_ADC_GetValue>
 80005b6:	4603      	mov	r3, r0
 80005b8:	86fb      	strh	r3, [r7, #54]	; 0x36
	  //set GPIO low
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f002 f8e4 	bl	8002790 <HAL_GPIO_WritePin>
	  // Convert to String then print
	  final = map_soil(raw, soinMin, soinMax, sooutMin, sooutMax);
 80005c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80005ca:	ee07 3a90 	vmov	s15, r3
 80005ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <main+0xcc>)
 80005d4:	ed93 7a00 	vldr	s14, [r3]
 80005d8:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <main+0xd0>)
 80005da:	edd3 6a00 	vldr	s13, [r3]
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <main+0xd4>)
 80005e0:	ed93 6a00 	vldr	s12, [r3]
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <main+0xd8>)
 80005e6:	edd3 5a00 	vldr	s11, [r3]
 80005ea:	eeb0 2a65 	vmov.f32	s4, s11
 80005ee:	eef0 1a46 	vmov.f32	s3, s12
 80005f2:	eeb0 1a66 	vmov.f32	s2, s13
 80005f6:	eef0 0a47 	vmov.f32	s1, s14
 80005fa:	eeb0 0a67 	vmov.f32	s0, s15
 80005fe:	f000 fb2a 	bl	8000c56 <map_soil>
 8000602:	eef0 7a40 	vmov.f32	s15, s0
 8000606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800060a:	ee17 3a90 	vmov	r3, s15
 800060e:	86bb      	strh	r3, [r7, #52]	; 0x34
	  sprintf(msg, "Wilgotnosc %d %% \r\n", final);
 8000610:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000612:	463b      	mov	r3, r7
 8000614:	490f      	ldr	r1, [pc, #60]	; (8000654 <main+0xdc>)
 8000616:	4618      	mov	r0, r3
 8000618:	f004 f8e4 	bl	80047e4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800061c:	463b      	mov	r3, r7
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fdd6 	bl	80001d0 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	b29a      	uxth	r2, r3
 8000628:	4639      	mov	r1, r7
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	480a      	ldr	r0, [pc, #40]	; (8000658 <main+0xe0>)
 8000630:	f003 fc20 	bl	8003e74 <HAL_UART_Transmit>
	  // Wait 1s for another reading
	  HAL_Delay(1000);
 8000634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000638:	f000 fbf4 	bl	8000e24 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800063c:	e7a9      	b.n	8000592 <main+0x1a>
 800063e:	bf00      	nop
 8000640:	200000a8 	.word	0x200000a8
 8000644:	20000004 	.word	0x20000004
 8000648:	20000000 	.word	0x20000000
 800064c:	20000098 	.word	0x20000098
 8000650:	20000008 	.word	0x20000008
 8000654:	08005058 	.word	0x08005058
 8000658:	2000010c 	.word	0x2000010c

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b0b8      	sub	sp, #224	; 0xe0
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000666:	2244      	movs	r2, #68	; 0x44
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f004 f8b2 	bl	80047d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2288      	movs	r2, #136	; 0x88
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f004 f8a4 	bl	80047d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000696:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069a:	2310      	movs	r3, #16
 800069c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a6:	2302      	movs	r3, #2
 80006a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006b2:	230a      	movs	r3, #10
 80006b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 f8da 	bl	8002888 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006da:	f000 f957 	bl	800098c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	230f      	movs	r3, #15
 80006e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2303      	movs	r3, #3
 80006e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000700:	2104      	movs	r1, #4
 8000702:	4618      	mov	r0, r3
 8000704:	f002 fca6 	bl	8003054 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800070e:	f000 f93d 	bl	800098c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000712:	f244 0302 	movw	r3, #16386	; 0x4002
 8000716:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000718:	2300      	movs	r3, #0
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800071c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000720:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000722:	2302      	movs	r3, #2
 8000724:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000726:	2301      	movs	r3, #1
 8000728:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800072a:	2308      	movs	r3, #8
 800072c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800072e:	2307      	movs	r3, #7
 8000730:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800073a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800073e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4618      	mov	r0, r3
 8000744:	f002 fe8c 	bl	8003460 <HAL_RCCEx_PeriphCLKConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800074e:	f000 f91d 	bl	800098c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000752:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000756:	f002 f841 	bl	80027dc <HAL_PWREx_ControlVoltageScaling>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000760:	f000 f914 	bl	800098c <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	37e0      	adds	r7, #224	; 0xe0
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
 800078c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800078e:	4b2f      	ldr	r3, [pc, #188]	; (800084c <MX_ADC1_Init+0xe0>)
 8000790:	4a2f      	ldr	r2, [pc, #188]	; (8000850 <MX_ADC1_Init+0xe4>)
 8000792:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_ADC1_Init+0xe0>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <MX_ADC1_Init+0xe0>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <MX_ADC1_Init+0xe0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <MX_ADC1_Init+0xe0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <MX_ADC1_Init+0xe0>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_ADC1_Init+0xe0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <MX_ADC1_Init+0xe0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007be:	4b23      	ldr	r3, [pc, #140]	; (800084c <MX_ADC1_Init+0xe0>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c4:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_ADC1_Init+0xe0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_ADC1_Init+0xe0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <MX_ADC1_Init+0xe0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_ADC1_Init+0xe0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_ADC1_Init+0xe0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_ADC1_Init+0xe0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ee:	4817      	ldr	r0, [pc, #92]	; (800084c <MX_ADC1_Init+0xe0>)
 80007f0:	f000 fd20 	bl	8001234 <HAL_ADC_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007fa:	f000 f8c7 	bl	800098c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4810      	ldr	r0, [pc, #64]	; (800084c <MX_ADC1_Init+0xe0>)
 800080a:	f001 fc81 	bl	8002110 <HAL_ADCEx_MultiModeConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000814:	f000 f8ba 	bl	800098c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_ADC1_Init+0xe8>)
 800081a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081c:	2306      	movs	r3, #6
 800081e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000824:	237f      	movs	r3, #127	; 0x7f
 8000826:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000828:	2304      	movs	r3, #4
 800082a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_ADC1_Init+0xe0>)
 8000836:	f000 fff3 	bl	8001820 <HAL_ADC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000840:	f000 f8a4 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000a8 	.word	0x200000a8
 8000850:	50040000 	.word	0x50040000
 8000854:	14f00020 	.word	0x14f00020

08000858 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800085e:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <MX_USART2_UART_Init+0x5c>)
 8000860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800089c:	f003 fa9c 	bl	8003dd8 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008a6:	f000 f871 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000010c 	.word	0x2000010c
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <MX_GPIO_Init+0xc8>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a2b      	ldr	r2, [pc, #172]	; (8000980 <MX_GPIO_Init+0xc8>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <MX_GPIO_Init+0xc8>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	4b26      	ldr	r3, [pc, #152]	; (8000980 <MX_GPIO_Init+0xc8>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a25      	ldr	r2, [pc, #148]	; (8000980 <MX_GPIO_Init+0xc8>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b23      	ldr	r3, [pc, #140]	; (8000980 <MX_GPIO_Init+0xc8>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_GPIO_Init+0xc8>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a1f      	ldr	r2, [pc, #124]	; (8000980 <MX_GPIO_Init+0xc8>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_GPIO_Init+0xc8>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_GPIO_Init+0xc8>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a19      	ldr	r2, [pc, #100]	; (8000980 <MX_GPIO_Init+0xc8>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_GPIO_Init+0xc8>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f001 ff2a 	bl	8002790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_GPIO_Init+0xcc>)
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_GPIO_Init+0xd0>)
 8000952:	f001 fd73 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8000956:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800095a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000972:	f001 fd63 	bl	800243c <HAL_GPIO_Init>

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000
 8000984:	10210000 	.word	0x10210000
 8000988:	48000800 	.word	0x48000800

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_MspInit+0x44>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a2:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <HAL_MspInit+0x44>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6613      	str	r3, [r2, #96]	; 0x60
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_MspInit+0x44>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x44>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x44>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6593      	str	r3, [r2, #88]	; 0x58
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x44>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <HAL_ADC_MspInit+0x74>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d124      	bne.n	8000a4c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <HAL_ADC_MspInit+0x78>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <HAL_ADC_MspInit+0x78>)
 8000a08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_ADC_MspInit+0x78>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_ADC_MspInit+0x78>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <HAL_ADC_MspInit+0x78>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_ADC_MspInit+0x78>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a32:	2301      	movs	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a36:	230b      	movs	r3, #11
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a48:	f001 fcf8 	bl	800243c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	; 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	50040000 	.word	0x50040000
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <HAL_UART_MspInit+0x7c>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d128      	bne.n	8000ad0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_UART_MspInit+0x80>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a82:	4a16      	ldr	r2, [pc, #88]	; (8000adc <HAL_UART_MspInit+0x80>)
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <HAL_UART_MspInit+0x80>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_UART_MspInit+0x80>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <HAL_UART_MspInit+0x80>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_UART_MspInit+0x80>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aae:	230c      	movs	r3, #12
 8000ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000abe:	2307      	movs	r3, #7
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000acc:	f001 fcb6 	bl	800243c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40004400 	.word	0x40004400
 8000adc:	40021000 	.word	0x40021000

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler+0x4>

08000af2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <UsageFault_Handler+0x4>

08000afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 f95a 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f003 fe0c 	bl	8004780 <__errno>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <_sbrk+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20018000 	.word	0x20018000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	2000009c 	.word	0x2000009c
 8000b9c:	200001a8 	.word	0x200001a8

08000ba0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <SystemInit+0x5c>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000baa:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <SystemInit+0x5c>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <SystemInit+0x60>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a11      	ldr	r2, [pc, #68]	; (8000c00 <SystemInit+0x60>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <SystemInit+0x60>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <SystemInit+0x60>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <SystemInit+0x60>)
 8000bcc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000bd0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000bd4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <SystemInit+0x60>)
 8000bd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bdc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <SystemInit+0x60>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <SystemInit+0x60>)
 8000be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000be8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <SystemInit+0x60>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00
 8000c00:	40021000 	.word	0x40021000

08000c04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c08:	f7ff ffca 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c0e:	e003      	b.n	8000c18 <LoopCopyDataInit>

08000c10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c16:	3104      	adds	r1, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c18:	480a      	ldr	r0, [pc, #40]	; (8000c44 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c20:	d3f6      	bcc.n	8000c10 <CopyDataInit>
	ldr	r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c24:	e002      	b.n	8000c2c <LoopFillZerobss>

08000c26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c28:	f842 3b04 	str.w	r3, [r2], #4

08000c2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <LoopForever+0x16>)
	cmp	r2, r3
 8000c2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c30:	d3f9      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c32:	f003 fdab 	bl	800478c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c36:	f7ff fc9f 	bl	8000578 <main>

08000c3a <LoopForever>:

LoopForever:
    b LoopForever
 8000c3a:	e7fe      	b.n	8000c3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c3c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c40:	080050f8 	.word	0x080050f8
	ldr	r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c48:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8000c4c:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8000c50:	200001a4 	.word	0x200001a4

08000c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC1_2_IRQHandler>

08000c56 <map_soil>:
 *  Created on: 10 mar 2021
 *      Author: Pawel
 */
#include "soil_moist.h"

float map_soil(float in, float soinMin, float soinMax, float sooutMin, float sooutMax){
 8000c56:	b480      	push	{r7}
 8000c58:	b089      	sub	sp, #36	; 0x24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	ed87 0a05 	vstr	s0, [r7, #20]
 8000c60:	edc7 0a04 	vstr	s1, [r7, #16]
 8000c64:	ed87 1a03 	vstr	s2, [r7, #12]
 8000c68:	edc7 1a02 	vstr	s3, [r7, #8]
 8000c6c:	ed87 2a01 	vstr	s4, [r7, #4]

  if (soinMin<soinMax) {
 8000c70:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c74:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c80:	d517      	bpl.n	8000cb2 <map_soil+0x5c>
    if (in <= soinMin)
 8000c82:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c86:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c92:	d802      	bhi.n	8000c9a <map_soil+0x44>
      return sooutMin;
 8000c94:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c98:	e041      	b.n	8000d1e <map_soil+0xc8>
    if (in >= soinMax)
 8000c9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ca2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000caa:	db1a      	blt.n	8000ce2 <map_soil+0x8c>
      return sooutMax;
 8000cac:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cb0:	e035      	b.n	8000d1e <map_soil+0xc8>
  } else {
    if (in >= soinMin)
 8000cb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc2:	db02      	blt.n	8000cca <map_soil+0x74>
      return sooutMin;
 8000cc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cc8:	e029      	b.n	8000d1e <map_soil+0xc8>
    if (in <= soinMax)
 8000cca:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cce:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cda:	d802      	bhi.n	8000ce2 <map_soil+0x8c>
      return sooutMax;
 8000cdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ce0:	e01d      	b.n	8000d1e <map_soil+0xc8>
  }
  float scale = (in-soinMin)/(soinMax-soinMin);
 8000ce2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ce6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cea:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000cee:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cf2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cfe:	edc7 7a07 	vstr	s15, [r7, #28]
  return sooutMin + scale*(sooutMax-sooutMin);
 8000d02:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d06:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d16:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d22:	3724      	adds	r7, #36	; 0x24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <HAL_Init+0x3c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <HAL_Init+0x3c>)
 8000d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d42:	2003      	movs	r0, #3
 8000d44:	f001 fb46 	bl	80023d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f000 f80f 	bl	8000d6c <HAL_InitTick>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d002      	beq.n	8000d5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	e001      	b.n	8000d5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d5a:	f7ff fe1d 	bl	8000998 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40022000 	.word	0x40022000

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_InitTick+0x6c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d023      	beq.n	8000dc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_InitTick+0x70>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <HAL_InitTick+0x6c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fb43 	bl	8002422 <HAL_SYSTICK_Config>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10f      	bne.n	8000dc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d809      	bhi.n	8000dbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f001 fb1b 	bl	80023ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db4:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_InitTick+0x74>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	e007      	b.n	8000dcc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e004      	b.n	8000dcc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	73fb      	strb	r3, [r7, #15]
 8000dc6:	e001      	b.n	8000dcc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000014 	.word	0x20000014
 8000ddc:	2000000c 	.word	0x2000000c
 8000de0:	20000010 	.word	0x20000010

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000014 	.word	0x20000014
 8000e08:	20000190 	.word	0x20000190

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000190 	.word	0x20000190

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff ffee 	bl	8000e0c <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d005      	beq.n	8000e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_Delay+0x44>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4a:	bf00      	nop
 8000e4c:	f7ff ffde 	bl	8000e0c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f7      	bhi.n	8000e4c <HAL_Delay+0x28>
  {
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000014 	.word	0x20000014

08000e6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	431a      	orrs	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	609a      	str	r2, [r3, #8]
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	3360      	adds	r3, #96	; 0x60
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <LL_ADC_SetOffset+0x44>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	430a      	orrs	r2, r1
 8000f02:	4313      	orrs	r3, r2
 8000f04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f0c:	bf00      	nop
 8000f0e:	371c      	adds	r7, #28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	03fff000 	.word	0x03fff000

08000f1c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3360      	adds	r3, #96	; 0x60
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	3360      	adds	r3, #96	; 0x60
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f72:	bf00      	nop
 8000f74:	371c      	adds	r7, #28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3330      	adds	r3, #48	; 0x30
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	f003 030c 	and.w	r3, r3, #12
 8000fc0:	4413      	add	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	f003 031f 	and.w	r3, r3, #31
 8000fce:	211f      	movs	r1, #31
 8000fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	0e9b      	lsrs	r3, r3, #26
 8000fdc:	f003 011f 	and.w	r1, r3, #31
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	f003 031f 	and.w	r3, r3, #31
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	431a      	orrs	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ff0:	bf00      	nop
 8000ff2:	371c      	adds	r7, #28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3314      	adds	r3, #20
 800100c:	461a      	mov	r2, r3
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	0e5b      	lsrs	r3, r3, #25
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	4413      	add	r3, r2
 800101a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	0d1b      	lsrs	r3, r3, #20
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	2107      	movs	r1, #7
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	401a      	ands	r2, r3
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	0d1b      	lsrs	r3, r3, #20
 8001036:	f003 031f 	and.w	r3, r3, #31
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	431a      	orrs	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001046:	bf00      	nop
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800106c:	43db      	mvns	r3, r3
 800106e:	401a      	ands	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0318 	and.w	r3, r3, #24
 8001076:	4908      	ldr	r1, [pc, #32]	; (8001098 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001078:	40d9      	lsrs	r1, r3
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	400b      	ands	r3, r1
 800107e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001082:	431a      	orrs	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	0007ffff 	.word	0x0007ffff

0800109c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 031f 	and.w	r3, r3, #31
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80010e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	6093      	str	r3, [r2, #8]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800110c:	d101      	bne.n	8001112 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001134:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800115c:	d101      	bne.n	8001162 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d101      	bne.n	80011b0 <LL_ADC_IsEnabled+0x18>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e000      	b.n	80011b2 <LL_ADC_IsEnabled+0x1a>
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d2:	f043 0204 	orr.w	r2, r3, #4
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d101      	bne.n	80011fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	2b08      	cmp	r3, #8
 800121e:	d101      	bne.n	8001224 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e136      	b.n	80014bc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001258:	2b00      	cmp	r3, #0
 800125a:	d109      	bne.n	8001270 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff fbbf 	bl	80009e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff3f 	bl	80010f8 <LL_ADC_IsDeepPowerDownEnabled>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d004      	beq.n	800128a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff25 	bl	80010d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff5a 	bl	8001148 <LL_ADC_IsInternalRegulatorEnabled>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d115      	bne.n	80012c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff3e 	bl	8001120 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012a4:	4b87      	ldr	r3, [pc, #540]	; (80014c4 <HAL_ADC_Init+0x290>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	099b      	lsrs	r3, r3, #6
 80012aa:	4a87      	ldr	r2, [pc, #540]	; (80014c8 <HAL_ADC_Init+0x294>)
 80012ac:	fba2 2303 	umull	r2, r3, r2, r3
 80012b0:	099b      	lsrs	r3, r3, #6
 80012b2:	3301      	adds	r3, #1
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012b8:	e002      	b.n	80012c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	3b01      	subs	r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f9      	bne.n	80012ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff3c 	bl	8001148 <LL_ADC_IsInternalRegulatorEnabled>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10d      	bne.n	80012f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012da:	f043 0210 	orr.w	r2, r3, #16
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	f043 0201 	orr.w	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff75 	bl	80011e6 <LL_ADC_REG_IsConversionOngoing>
 80012fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	2b00      	cmp	r3, #0
 8001308:	f040 80cf 	bne.w	80014aa <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	2b00      	cmp	r3, #0
 8001310:	f040 80cb 	bne.w	80014aa <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001318:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800131c:	f043 0202 	orr.w	r2, r3, #2
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff35 	bl	8001198 <LL_ADC_IsEnabled>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d115      	bne.n	8001360 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001334:	4865      	ldr	r0, [pc, #404]	; (80014cc <HAL_ADC_Init+0x298>)
 8001336:	f7ff ff2f 	bl	8001198 <LL_ADC_IsEnabled>
 800133a:	4604      	mov	r4, r0
 800133c:	4864      	ldr	r0, [pc, #400]	; (80014d0 <HAL_ADC_Init+0x29c>)
 800133e:	f7ff ff2b 	bl	8001198 <LL_ADC_IsEnabled>
 8001342:	4603      	mov	r3, r0
 8001344:	431c      	orrs	r4, r3
 8001346:	4863      	ldr	r0, [pc, #396]	; (80014d4 <HAL_ADC_Init+0x2a0>)
 8001348:	f7ff ff26 	bl	8001198 <LL_ADC_IsEnabled>
 800134c:	4603      	mov	r3, r0
 800134e:	4323      	orrs	r3, r4
 8001350:	2b00      	cmp	r3, #0
 8001352:	d105      	bne.n	8001360 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	4619      	mov	r1, r3
 800135a:	485f      	ldr	r0, [pc, #380]	; (80014d8 <HAL_ADC_Init+0x2a4>)
 800135c:	f7ff fd86 	bl	8000e6c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7e5b      	ldrb	r3, [r3, #25]
 8001364:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800136a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001370:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001376:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800137e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d106      	bne.n	800139c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	3b01      	subs	r3, #1
 8001394:	045b      	lsls	r3, r3, #17
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d009      	beq.n	80013b8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	4b47      	ldr	r3, [pc, #284]	; (80014dc <HAL_ADC_Init+0x2a8>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	69b9      	ldr	r1, [r7, #24]
 80013c8:	430b      	orrs	r3, r1
 80013ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff08 	bl	80011e6 <LL_ADC_REG_IsConversionOngoing>
 80013d6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff15 	bl	800120c <LL_ADC_INJ_IsConversionOngoing>
 80013e2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d13d      	bne.n	8001466 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d13a      	bne.n	8001466 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013f4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013fc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800140c:	f023 0302 	bic.w	r3, r3, #2
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	69b9      	ldr	r1, [r7, #24]
 8001416:	430b      	orrs	r3, r1
 8001418:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001420:	2b01      	cmp	r3, #1
 8001422:	d118      	bne.n	8001456 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800142e:	f023 0304 	bic.w	r3, r3, #4
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800143a:	4311      	orrs	r1, r2
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001440:	4311      	orrs	r1, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001446:	430a      	orrs	r2, r1
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	e007      	b.n	8001466 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0201 	bic.w	r2, r2, #1
 8001464:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d10c      	bne.n	8001488 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	f023 010f 	bic.w	r1, r3, #15
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	1e5a      	subs	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	631a      	str	r2, [r3, #48]	; 0x30
 8001486:	e007      	b.n	8001498 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 020f 	bic.w	r2, r2, #15
 8001496:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149c:	f023 0303 	bic.w	r3, r3, #3
 80014a0:	f043 0201 	orr.w	r2, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	655a      	str	r2, [r3, #84]	; 0x54
 80014a8:	e007      	b.n	80014ba <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ae:	f043 0210 	orr.w	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3724      	adds	r7, #36	; 0x24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd90      	pop	{r4, r7, pc}
 80014c4:	2000000c 	.word	0x2000000c
 80014c8:	053e2d63 	.word	0x053e2d63
 80014cc:	50040000 	.word	0x50040000
 80014d0:	50040100 	.word	0x50040100
 80014d4:	50040200 	.word	0x50040200
 80014d8:	50040300 	.word	0x50040300
 80014dc:	fff0c007 	.word	0xfff0c007

080014e0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014e8:	4857      	ldr	r0, [pc, #348]	; (8001648 <HAL_ADC_Start+0x168>)
 80014ea:	f7ff fdd7 	bl	800109c <LL_ADC_GetMultimode>
 80014ee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fe76 	bl	80011e6 <LL_ADC_REG_IsConversionOngoing>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f040 809c 	bne.w	800163a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_ADC_Start+0x30>
 800150c:	2302      	movs	r3, #2
 800150e:	e097      	b.n	8001640 <HAL_ADC_Start+0x160>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 fd71 	bl	8002000 <ADC_Enable>
 800151e:	4603      	mov	r3, r0
 8001520:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	2b00      	cmp	r3, #0
 8001526:	f040 8083 	bne.w	8001630 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001532:	f023 0301 	bic.w	r3, r3, #1
 8001536:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a42      	ldr	r2, [pc, #264]	; (800164c <HAL_ADC_Start+0x16c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d002      	beq.n	800154e <HAL_ADC_Start+0x6e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	e000      	b.n	8001550 <HAL_ADC_Start+0x70>
 800154e:	4b40      	ldr	r3, [pc, #256]	; (8001650 <HAL_ADC_Start+0x170>)
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	4293      	cmp	r3, r2
 8001556:	d002      	beq.n	800155e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d105      	bne.n	800156a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001562:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001576:	d106      	bne.n	8001586 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157c:	f023 0206 	bic.w	r2, r3, #6
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	659a      	str	r2, [r3, #88]	; 0x58
 8001584:	e002      	b.n	800158c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	221c      	movs	r2, #28
 8001592:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a2a      	ldr	r2, [pc, #168]	; (800164c <HAL_ADC_Start+0x16c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d002      	beq.n	80015ac <HAL_ADC_Start+0xcc>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	e000      	b.n	80015ae <HAL_ADC_Start+0xce>
 80015ac:	4b28      	ldr	r3, [pc, #160]	; (8001650 <HAL_ADC_Start+0x170>)
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d008      	beq.n	80015c8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	2b05      	cmp	r3, #5
 80015c0:	d002      	beq.n	80015c8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	2b09      	cmp	r3, #9
 80015c6:	d114      	bne.n	80015f2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d007      	beq.n	80015e6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fde7 	bl	80011be <LL_ADC_REG_StartConversion>
 80015f0:	e025      	b.n	800163e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <HAL_ADC_Start+0x16c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d002      	beq.n	800160e <HAL_ADC_Start+0x12e>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	e000      	b.n	8001610 <HAL_ADC_Start+0x130>
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_ADC_Start+0x170>)
 8001610:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00f      	beq.n	800163e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001622:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001626:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	655a      	str	r2, [r3, #84]	; 0x54
 800162e:	e006      	b.n	800163e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001638:	e001      	b.n	800163e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800163a:	2302      	movs	r3, #2
 800163c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800163e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	50040300 	.word	0x50040300
 800164c:	50040100 	.word	0x50040100
 8001650:	50040000 	.word	0x50040000

08001654 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800165e:	4866      	ldr	r0, [pc, #408]	; (80017f8 <HAL_ADC_PollForConversion+0x1a4>)
 8001660:	f7ff fd1c 	bl	800109c <LL_ADC_GetMultimode>
 8001664:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	2b08      	cmp	r3, #8
 800166c:	d102      	bne.n	8001674 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800166e:	2308      	movs	r3, #8
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	e02a      	b.n	80016ca <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d005      	beq.n	8001686 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b05      	cmp	r3, #5
 800167e:	d002      	beq.n	8001686 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2b09      	cmp	r3, #9
 8001684:	d111      	bne.n	80016aa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d007      	beq.n	80016a4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001698:	f043 0220 	orr.w	r2, r3, #32
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0a4      	b.n	80017ee <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80016a4:	2304      	movs	r3, #4
 80016a6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80016a8:	e00f      	b.n	80016ca <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80016aa:	4853      	ldr	r0, [pc, #332]	; (80017f8 <HAL_ADC_PollForConversion+0x1a4>)
 80016ac:	f7ff fd04 	bl	80010b8 <LL_ADC_GetMultiDMATransfer>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ba:	f043 0220 	orr.w	r2, r3, #32
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e093      	b.n	80017ee <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80016c6:	2304      	movs	r3, #4
 80016c8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80016ca:	f7ff fb9f 	bl	8000e0c <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016d0:	e021      	b.n	8001716 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d8:	d01d      	beq.n	8001716 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80016da:	f7ff fb97 	bl	8000e0c <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d302      	bcc.n	80016f0 <HAL_ADC_PollForConversion+0x9c>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d112      	bne.n	8001716 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10b      	bne.n	8001716 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001702:	f043 0204 	orr.w	r2, r3, #4
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e06b      	b.n	80017ee <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0d6      	beq.n	80016d2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001728:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fc22 	bl	8000f7e <LL_ADC_REG_IsTriggerSourceSWStart>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d01c      	beq.n	800177a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7e5b      	ldrb	r3, [r3, #25]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d118      	bne.n	800177a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b08      	cmp	r3, #8
 8001754:	d111      	bne.n	800177a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d105      	bne.n	800177a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001772:	f043 0201 	orr.w	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a1f      	ldr	r2, [pc, #124]	; (80017fc <HAL_ADC_PollForConversion+0x1a8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d002      	beq.n	800178a <HAL_ADC_PollForConversion+0x136>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	e000      	b.n	800178c <HAL_ADC_PollForConversion+0x138>
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_ADC_PollForConversion+0x1ac>)
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	4293      	cmp	r3, r2
 8001792:	d008      	beq.n	80017a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d002      	beq.n	80017a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b09      	cmp	r3, #9
 80017a4:	d104      	bne.n	80017b0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	e00c      	b.n	80017ca <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a11      	ldr	r2, [pc, #68]	; (80017fc <HAL_ADC_PollForConversion+0x1a8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d002      	beq.n	80017c0 <HAL_ADC_PollForConversion+0x16c>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	e000      	b.n	80017c2 <HAL_ADC_PollForConversion+0x16e>
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_ADC_PollForConversion+0x1ac>)
 80017c2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d104      	bne.n	80017da <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2208      	movs	r2, #8
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e008      	b.n	80017ec <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d103      	bne.n	80017ec <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	220c      	movs	r2, #12
 80017ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	50040300 	.word	0x50040300
 80017fc:	50040100 	.word	0x50040100
 8001800:	50040000 	.word	0x50040000

08001804 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b0b6      	sub	sp, #216	; 0xd8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_ADC_ConfigChannel+0x22>
 800183e:	2302      	movs	r3, #2
 8001840:	e3c7      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x7b2>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fcc9 	bl	80011e6 <LL_ADC_REG_IsConversionOngoing>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	f040 83a8 	bne.w	8001fac <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b05      	cmp	r3, #5
 8001862:	d824      	bhi.n	80018ae <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	3b02      	subs	r3, #2
 800186a:	2b03      	cmp	r3, #3
 800186c:	d81b      	bhi.n	80018a6 <HAL_ADC_ConfigChannel+0x86>
 800186e:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <HAL_ADC_ConfigChannel+0x54>)
 8001870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001874:	08001885 	.word	0x08001885
 8001878:	0800188d 	.word	0x0800188d
 800187c:	08001895 	.word	0x08001895
 8001880:	0800189d 	.word	0x0800189d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	220c      	movs	r2, #12
 8001888:	605a      	str	r2, [r3, #4]
          break;
 800188a:	e011      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	2212      	movs	r2, #18
 8001890:	605a      	str	r2, [r3, #4]
          break;
 8001892:	e00d      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2218      	movs	r2, #24
 8001898:	605a      	str	r2, [r3, #4]
          break;
 800189a:	e009      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a2:	605a      	str	r2, [r3, #4]
          break;
 80018a4:	e004      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2206      	movs	r2, #6
 80018aa:	605a      	str	r2, [r3, #4]
          break;
 80018ac:	e000      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80018ae:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	f7ff fb71 	bl	8000fa4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fc8d 	bl	80011e6 <LL_ADC_REG_IsConversionOngoing>
 80018cc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fc99 	bl	800120c <LL_ADC_INJ_IsConversionOngoing>
 80018da:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 81a6 	bne.w	8001c34 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f040 81a1 	bne.w	8001c34 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	6819      	ldr	r1, [r3, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	461a      	mov	r2, r3
 8001900:	f7ff fb7c 	bl	8000ffc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	08db      	lsrs	r3, r3, #3
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	2b04      	cmp	r3, #4
 8001924:	d00a      	beq.n	800193c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	6919      	ldr	r1, [r3, #16]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001936:	f7ff facd 	bl	8000ed4 <LL_ADC_SetOffset>
 800193a:	e17b      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff faea 	bl	8000f1c <LL_ADC_GetOffsetChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10a      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x148>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fadf 	bl	8000f1c <LL_ADC_GetOffsetChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	0e9b      	lsrs	r3, r3, #26
 8001962:	f003 021f 	and.w	r2, r3, #31
 8001966:	e01e      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x186>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fad4 	bl	8000f1c <LL_ADC_GetOffsetChannel>
 8001974:	4603      	mov	r3, r0
 8001976:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001986:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800198a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800198e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001996:	2320      	movs	r3, #32
 8001998:	e004      	b.n	80019a4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800199a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d105      	bne.n	80019be <HAL_ADC_ConfigChannel+0x19e>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	0e9b      	lsrs	r3, r3, #26
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	e018      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x1d0>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019ca:	fa93 f3a3 	rbit	r3, r3
 80019ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80019e2:	2320      	movs	r3, #32
 80019e4:	e004      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80019e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019ea:	fab3 f383 	clz	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d106      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff faa3 	bl	8000f48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2101      	movs	r1, #1
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fa87 	bl	8000f1c <LL_ADC_GetOffsetChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10a      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x20e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fa7c 	bl	8000f1c <LL_ADC_GetOffsetChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	0e9b      	lsrs	r3, r3, #26
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	e01e      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x24c>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2101      	movs	r1, #1
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fa71 	bl	8000f1c <LL_ADC_GetOffsetChannel>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001a5c:	2320      	movs	r3, #32
 8001a5e:	e004      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001a60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d105      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x264>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0e9b      	lsrs	r3, r3, #26
 8001a7e:	f003 031f 	and.w	r3, r3, #31
 8001a82:	e018      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x296>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001aa8:	2320      	movs	r3, #32
 8001aaa:	e004      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d106      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fa40 	bl	8000f48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2102      	movs	r1, #2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fa24 	bl	8000f1c <LL_ADC_GetOffsetChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10a      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x2d4>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fa19 	bl	8000f1c <LL_ADC_GetOffsetChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	0e9b      	lsrs	r3, r3, #26
 8001aee:	f003 021f 	and.w	r2, r3, #31
 8001af2:	e01e      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x312>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2102      	movs	r1, #2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fa0e 	bl	8000f1c <LL_ADC_GetOffsetChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001b22:	2320      	movs	r3, #32
 8001b24:	e004      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001b26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d105      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x32a>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	0e9b      	lsrs	r3, r3, #26
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	e016      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x358>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b56:	fa93 f3a3 	rbit	r3, r3
 8001b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001b6a:	2320      	movs	r3, #32
 8001b6c:	e004      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001b6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d106      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2200      	movs	r2, #0
 8001b82:	2102      	movs	r1, #2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f9df 	bl	8000f48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2103      	movs	r1, #3
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff f9c3 	bl	8000f1c <LL_ADC_GetOffsetChannel>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10a      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x396>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2103      	movs	r1, #3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff f9b8 	bl	8000f1c <LL_ADC_GetOffsetChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	0e9b      	lsrs	r3, r3, #26
 8001bb0:	f003 021f 	and.w	r2, r3, #31
 8001bb4:	e017      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x3c6>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2103      	movs	r1, #3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff f9ad 	bl	8000f1c <LL_ADC_GetOffsetChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001bce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bd0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001bd8:	2320      	movs	r3, #32
 8001bda:	e003      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d105      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x3de>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	0e9b      	lsrs	r3, r3, #26
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	e011      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x402>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001c16:	2320      	movs	r3, #32
 8001c18:	e003      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d106      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2103      	movs	r1, #3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f98a 	bl	8000f48 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff faad 	bl	8001198 <LL_ADC_IsEnabled>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f040 813f 	bne.w	8001ec4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	6819      	ldr	r1, [r3, #0]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	461a      	mov	r2, r3
 8001c54:	f7ff f9fe 	bl	8001054 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4a8e      	ldr	r2, [pc, #568]	; (8001e98 <HAL_ADC_ConfigChannel+0x678>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	f040 8130 	bne.w	8001ec4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10b      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x46c>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0e9b      	lsrs	r3, r3, #26
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	2b09      	cmp	r3, #9
 8001c82:	bf94      	ite	ls
 8001c84:	2301      	movls	r3, #1
 8001c86:	2300      	movhi	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	e019      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x4a0>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c9c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	e003      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001ca8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	2b09      	cmp	r3, #9
 8001cb8:	bf94      	ite	ls
 8001cba:	2301      	movls	r3, #1
 8001cbc:	2300      	movhi	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d079      	beq.n	8001db8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d107      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x4c0>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0e9b      	lsrs	r3, r3, #26
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	069b      	lsls	r3, r3, #26
 8001cda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cde:	e015      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x4ec>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce8:	fa93 f3a3 	rbit	r3, r3
 8001cec:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cf0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	e003      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	3301      	adds	r3, #1
 8001d06:	069b      	lsls	r3, r3, #26
 8001d08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x50c>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0e9b      	lsrs	r3, r3, #26
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	2101      	movs	r1, #1
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	e017      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x53c>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d3c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001d44:	2320      	movs	r3, #32
 8001d46:	e003      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	3301      	adds	r3, #1
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	2101      	movs	r1, #1
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	ea42 0103 	orr.w	r1, r2, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10a      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x562>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0e9b      	lsrs	r3, r3, #26
 8001d72:	3301      	adds	r3, #1
 8001d74:	f003 021f 	and.w	r2, r3, #31
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	051b      	lsls	r3, r3, #20
 8001d80:	e018      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x594>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	e003      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	3301      	adds	r3, #1
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001db4:	430b      	orrs	r3, r1
 8001db6:	e080      	b.n	8001eba <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d107      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x5b4>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	0e9b      	lsrs	r3, r3, #26
 8001dca:	3301      	adds	r3, #1
 8001dcc:	069b      	lsls	r3, r3, #26
 8001dce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dd2:	e015      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x5e0>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001dec:	2320      	movs	r3, #32
 8001dee:	e003      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	069b      	lsls	r3, r3, #26
 8001dfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d109      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x600>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0e9b      	lsrs	r3, r3, #26
 8001e12:	3301      	adds	r3, #1
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	2101      	movs	r1, #1
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	e017      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x630>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	61fb      	str	r3, [r7, #28]
  return result;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001e38:	2320      	movs	r3, #32
 8001e3a:	e003      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	3301      	adds	r3, #1
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	ea42 0103 	orr.w	r1, r2, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10d      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x65c>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	0e9b      	lsrs	r3, r3, #26
 8001e66:	3301      	adds	r3, #1
 8001e68:	f003 021f 	and.w	r2, r3, #31
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	3b1e      	subs	r3, #30
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	e01d      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x698>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	613b      	str	r3, [r7, #16]
  return result;
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d103      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001e94:	2320      	movs	r3, #32
 8001e96:	e005      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x684>
 8001e98:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f003 021f 	and.w	r2, r3, #31
 8001eaa:	4613      	mov	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b1e      	subs	r3, #30
 8001eb2:	051b      	lsls	r3, r3, #20
 8001eb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	6892      	ldr	r2, [r2, #8]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7ff f89c 	bl	8000ffc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b44      	ldr	r3, [pc, #272]	; (8001fdc <HAL_ADC_ConfigChannel+0x7bc>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d07a      	beq.n	8001fc6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ed0:	4843      	ldr	r0, [pc, #268]	; (8001fe0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ed2:	f7fe fff1 	bl	8000eb8 <LL_ADC_GetCommonPathInternalCh>
 8001ed6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a41      	ldr	r2, [pc, #260]	; (8001fe4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d12c      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ee4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ee8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d126      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a3c      	ldr	r2, [pc, #240]	; (8001fe8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d004      	beq.n	8001f04 <HAL_ADC_ConfigChannel+0x6e4>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a3b      	ldr	r2, [pc, #236]	; (8001fec <HAL_ADC_ConfigChannel+0x7cc>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d15d      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4834      	ldr	r0, [pc, #208]	; (8001fe0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f10:	f7fe ffbf 	bl	8000e92 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f14:	4b36      	ldr	r3, [pc, #216]	; (8001ff0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	099b      	lsrs	r3, r3, #6
 8001f1a:	4a36      	ldr	r2, [pc, #216]	; (8001ff4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	099b      	lsrs	r3, r3, #6
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f2e:	e002      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f9      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f3c:	e040      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a2d      	ldr	r2, [pc, #180]	; (8001ff8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d118      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x75a>
 8001f48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d112      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a23      	ldr	r2, [pc, #140]	; (8001fe8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d004      	beq.n	8001f68 <HAL_ADC_ConfigChannel+0x748>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a22      	ldr	r2, [pc, #136]	; (8001fec <HAL_ADC_ConfigChannel+0x7cc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d12d      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f70:	4619      	mov	r1, r3
 8001f72:	481b      	ldr	r0, [pc, #108]	; (8001fe0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f74:	f7fe ff8d 	bl	8000e92 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f78:	e024      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <HAL_ADC_ConfigChannel+0x7dc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d120      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d11a      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a14      	ldr	r2, [pc, #80]	; (8001fe8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d115      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480e      	ldr	r0, [pc, #56]	; (8001fe0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001fa6:	f7fe ff74 	bl	8000e92 <LL_ADC_SetCommonPathInternalCh>
 8001faa:	e00c      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb0:	f043 0220 	orr.w	r2, r3, #32
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001fbe:	e002      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fc0:	bf00      	nop
 8001fc2:	e000      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fc4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	37d8      	adds	r7, #216	; 0xd8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	80080000 	.word	0x80080000
 8001fe0:	50040300 	.word	0x50040300
 8001fe4:	c7520000 	.word	0xc7520000
 8001fe8:	50040000 	.word	0x50040000
 8001fec:	50040200 	.word	0x50040200
 8001ff0:	2000000c 	.word	0x2000000c
 8001ff4:	053e2d63 	.word	0x053e2d63
 8001ff8:	cb840000 	.word	0xcb840000
 8001ffc:	80000001 	.word	0x80000001

08002000 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff f8c3 	bl	8001198 <LL_ADC_IsEnabled>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d14d      	bne.n	80020b4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <ADC_Enable+0xc0>)
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00d      	beq.n	8002042 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	f043 0210 	orr.w	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e039      	b.n	80020b6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff f892 	bl	8001170 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800204c:	f7fe fede 	bl	8000e0c <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002052:	e028      	b.n	80020a6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff f89d 	bl	8001198 <LL_ADC_IsEnabled>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d104      	bne.n	800206e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff f881 	bl	8001170 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800206e:	f7fe fecd 	bl	8000e0c <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d914      	bls.n	80020a6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b01      	cmp	r3, #1
 8002088:	d00d      	beq.n	80020a6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208e:	f043 0210 	orr.w	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	f043 0201 	orr.w	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e007      	b.n	80020b6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d1cf      	bne.n	8002054 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	8000003f 	.word	0x8000003f

080020c4 <LL_ADC_IsEnabled>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <LL_ADC_IsEnabled+0x18>
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <LL_ADC_IsEnabled+0x1a>
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_ADC_REG_IsConversionOngoing>:
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d101      	bne.n	8002102 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b09f      	sub	sp, #124	; 0x7c
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800212a:	2302      	movs	r3, #2
 800212c:	e093      	b.n	8002256 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002136:	2300      	movs	r3, #0
 8002138:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800213a:	2300      	movs	r3, #0
 800213c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a47      	ldr	r2, [pc, #284]	; (8002260 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d102      	bne.n	800214e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002148:	4b46      	ldr	r3, [pc, #280]	; (8002264 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	e001      	b.n	8002152 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10b      	bne.n	8002170 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215c:	f043 0220 	orr.w	r2, r3, #32
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e072      	b.n	8002256 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ffb9 	bl	80020ea <LL_ADC_REG_IsConversionOngoing>
 8002178:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ffb3 	bl	80020ea <LL_ADC_REG_IsConversionOngoing>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d154      	bne.n	8002234 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800218a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800218c:	2b00      	cmp	r3, #0
 800218e:	d151      	bne.n	8002234 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002190:	4b35      	ldr	r3, [pc, #212]	; (8002268 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002192:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d02c      	beq.n	80021f6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800219c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021ae:	035b      	lsls	r3, r3, #13
 80021b0:	430b      	orrs	r3, r1
 80021b2:	431a      	orrs	r2, r3
 80021b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021b8:	4829      	ldr	r0, [pc, #164]	; (8002260 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80021ba:	f7ff ff83 	bl	80020c4 <LL_ADC_IsEnabled>
 80021be:	4604      	mov	r4, r0
 80021c0:	4828      	ldr	r0, [pc, #160]	; (8002264 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021c2:	f7ff ff7f 	bl	80020c4 <LL_ADC_IsEnabled>
 80021c6:	4603      	mov	r3, r0
 80021c8:	431c      	orrs	r4, r3
 80021ca:	4828      	ldr	r0, [pc, #160]	; (800226c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80021cc:	f7ff ff7a 	bl	80020c4 <LL_ADC_IsEnabled>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4323      	orrs	r3, r4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d137      	bne.n	8002248 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021e0:	f023 030f 	bic.w	r3, r3, #15
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	6811      	ldr	r1, [r2, #0]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	6892      	ldr	r2, [r2, #8]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	431a      	orrs	r2, r3
 80021f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021f4:	e028      	b.n	8002248 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80021f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002200:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002202:	4817      	ldr	r0, [pc, #92]	; (8002260 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002204:	f7ff ff5e 	bl	80020c4 <LL_ADC_IsEnabled>
 8002208:	4604      	mov	r4, r0
 800220a:	4816      	ldr	r0, [pc, #88]	; (8002264 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800220c:	f7ff ff5a 	bl	80020c4 <LL_ADC_IsEnabled>
 8002210:	4603      	mov	r3, r0
 8002212:	431c      	orrs	r4, r3
 8002214:	4815      	ldr	r0, [pc, #84]	; (800226c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002216:	f7ff ff55 	bl	80020c4 <LL_ADC_IsEnabled>
 800221a:	4603      	mov	r3, r0
 800221c:	4323      	orrs	r3, r4
 800221e:	2b00      	cmp	r3, #0
 8002220:	d112      	bne.n	8002248 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800222a:	f023 030f 	bic.w	r3, r3, #15
 800222e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002230:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002232:	e009      	b.n	8002248 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	f043 0220 	orr.w	r2, r3, #32
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002246:	e000      	b.n	800224a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002248:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002252:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002256:	4618      	mov	r0, r3
 8002258:	377c      	adds	r7, #124	; 0x7c
 800225a:	46bd      	mov	sp, r7
 800225c:	bd90      	pop	{r4, r7, pc}
 800225e:	bf00      	nop
 8002260:	50040000 	.word	0x50040000
 8002264:	50040100 	.word	0x50040100
 8002268:	50040300 	.word	0x50040300
 800226c:	50040200 	.word	0x50040200

08002270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800228c:	4013      	ands	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800229c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a2:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	60d3      	str	r3, [r2, #12]
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <__NVIC_GetPriorityGrouping+0x18>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	f003 0307 	and.w	r3, r3, #7
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db0a      	blt.n	80022fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	490c      	ldr	r1, [pc, #48]	; (8002320 <__NVIC_SetPriority+0x4c>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	0112      	lsls	r2, r2, #4
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	440b      	add	r3, r1
 80022f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022fc:	e00a      	b.n	8002314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4908      	ldr	r1, [pc, #32]	; (8002324 <__NVIC_SetPriority+0x50>)
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	3b04      	subs	r3, #4
 800230c:	0112      	lsls	r2, r2, #4
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	440b      	add	r3, r1
 8002312:	761a      	strb	r2, [r3, #24]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000e100 	.word	0xe000e100
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	; 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f1c3 0307 	rsb	r3, r3, #7
 8002342:	2b04      	cmp	r3, #4
 8002344:	bf28      	it	cs
 8002346:	2304      	movcs	r3, #4
 8002348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3304      	adds	r3, #4
 800234e:	2b06      	cmp	r3, #6
 8002350:	d902      	bls.n	8002358 <NVIC_EncodePriority+0x30>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3b03      	subs	r3, #3
 8002356:	e000      	b.n	800235a <NVIC_EncodePriority+0x32>
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	f04f 32ff 	mov.w	r2, #4294967295
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	401a      	ands	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002370:	f04f 31ff 	mov.w	r1, #4294967295
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43d9      	mvns	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	4313      	orrs	r3, r2
         );
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a0:	d301      	bcc.n	80023a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00f      	b.n	80023c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <SysTick_Config+0x40>)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ae:	210f      	movs	r1, #15
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	f7ff ff8e 	bl	80022d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <SysTick_Config+0x40>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <SysTick_Config+0x40>)
 80023c0:	2207      	movs	r2, #7
 80023c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	e000e010 	.word	0xe000e010

080023d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ff47 	bl	8002270 <__NVIC_SetPriorityGrouping>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4603      	mov	r3, r0
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023fc:	f7ff ff5c 	bl	80022b8 <__NVIC_GetPriorityGrouping>
 8002400:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	6978      	ldr	r0, [r7, #20]
 8002408:	f7ff ff8e 	bl	8002328 <NVIC_EncodePriority>
 800240c:	4602      	mov	r2, r0
 800240e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff5d 	bl	80022d4 <__NVIC_SetPriority>
}
 800241a:	bf00      	nop
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ffb0 	bl	8002390 <SysTick_Config>
 8002430:	4603      	mov	r3, r0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800244a:	e17f      	b.n	800274c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	2101      	movs	r1, #1
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	4013      	ands	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 8171 	beq.w	8002746 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d00b      	beq.n	8002484 <HAL_GPIO_Init+0x48>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d007      	beq.n	8002484 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002478:	2b11      	cmp	r3, #17
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b12      	cmp	r3, #18
 8002482:	d130      	bne.n	80024e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ba:	2201      	movs	r2, #1
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	f003 0201 	and.w	r2, r3, #1
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d118      	bne.n	8002524 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024f8:	2201      	movs	r2, #1
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	08db      	lsrs	r3, r3, #3
 800250e:	f003 0201 	and.w	r2, r3, #1
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x128>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b12      	cmp	r3, #18
 8002562:	d123      	bne.n	80025ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	08da      	lsrs	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3208      	adds	r2, #8
 800256c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	220f      	movs	r2, #15
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3208      	adds	r2, #8
 80025a6:	6939      	ldr	r1, [r7, #16]
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80ac 	beq.w	8002746 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	4b5f      	ldr	r3, [pc, #380]	; (800276c <HAL_GPIO_Init+0x330>)
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	4a5e      	ldr	r2, [pc, #376]	; (800276c <HAL_GPIO_Init+0x330>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6613      	str	r3, [r2, #96]	; 0x60
 80025fa:	4b5c      	ldr	r3, [pc, #368]	; (800276c <HAL_GPIO_Init+0x330>)
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002606:	4a5a      	ldr	r2, [pc, #360]	; (8002770 <HAL_GPIO_Init+0x334>)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002612:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	220f      	movs	r2, #15
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002630:	d025      	beq.n	800267e <HAL_GPIO_Init+0x242>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4f      	ldr	r2, [pc, #316]	; (8002774 <HAL_GPIO_Init+0x338>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01f      	beq.n	800267a <HAL_GPIO_Init+0x23e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4e      	ldr	r2, [pc, #312]	; (8002778 <HAL_GPIO_Init+0x33c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d019      	beq.n	8002676 <HAL_GPIO_Init+0x23a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4d      	ldr	r2, [pc, #308]	; (800277c <HAL_GPIO_Init+0x340>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_GPIO_Init+0x236>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4c      	ldr	r2, [pc, #304]	; (8002780 <HAL_GPIO_Init+0x344>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00d      	beq.n	800266e <HAL_GPIO_Init+0x232>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4b      	ldr	r2, [pc, #300]	; (8002784 <HAL_GPIO_Init+0x348>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x22e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4a      	ldr	r2, [pc, #296]	; (8002788 <HAL_GPIO_Init+0x34c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_GPIO_Init+0x22a>
 8002662:	2306      	movs	r3, #6
 8002664:	e00c      	b.n	8002680 <HAL_GPIO_Init+0x244>
 8002666:	2307      	movs	r3, #7
 8002668:	e00a      	b.n	8002680 <HAL_GPIO_Init+0x244>
 800266a:	2305      	movs	r3, #5
 800266c:	e008      	b.n	8002680 <HAL_GPIO_Init+0x244>
 800266e:	2304      	movs	r3, #4
 8002670:	e006      	b.n	8002680 <HAL_GPIO_Init+0x244>
 8002672:	2303      	movs	r3, #3
 8002674:	e004      	b.n	8002680 <HAL_GPIO_Init+0x244>
 8002676:	2302      	movs	r3, #2
 8002678:	e002      	b.n	8002680 <HAL_GPIO_Init+0x244>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <HAL_GPIO_Init+0x244>
 800267e:	2300      	movs	r3, #0
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	f002 0203 	and.w	r2, r2, #3
 8002686:	0092      	lsls	r2, r2, #2
 8002688:	4093      	lsls	r3, r2
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002690:	4937      	ldr	r1, [pc, #220]	; (8002770 <HAL_GPIO_Init+0x334>)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	3302      	adds	r3, #2
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800269e:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_GPIO_Init+0x350>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026c2:	4a32      	ldr	r2, [pc, #200]	; (800278c <HAL_GPIO_Init+0x350>)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80026c8:	4b30      	ldr	r3, [pc, #192]	; (800278c <HAL_GPIO_Init+0x350>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026ec:	4a27      	ldr	r2, [pc, #156]	; (800278c <HAL_GPIO_Init+0x350>)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026f2:	4b26      	ldr	r3, [pc, #152]	; (800278c <HAL_GPIO_Init+0x350>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002716:	4a1d      	ldr	r2, [pc, #116]	; (800278c <HAL_GPIO_Init+0x350>)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_GPIO_Init+0x350>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002740:	4a12      	ldr	r2, [pc, #72]	; (800278c <HAL_GPIO_Init+0x350>)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3301      	adds	r3, #1
 800274a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa22 f303 	lsr.w	r3, r2, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	f47f ae78 	bne.w	800244c <HAL_GPIO_Init+0x10>
  }
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
 8002770:	40010000 	.word	0x40010000
 8002774:	48000400 	.word	0x48000400
 8002778:	48000800 	.word	0x48000800
 800277c:	48000c00 	.word	0x48000c00
 8002780:	48001000 	.word	0x48001000
 8002784:	48001400 	.word	0x48001400
 8002788:	48001800 	.word	0x48001800
 800278c:	40010400 	.word	0x40010400

08002790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	807b      	strh	r3, [r7, #2]
 800279c:	4613      	mov	r3, r2
 800279e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027a0:	787b      	ldrb	r3, [r7, #1]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027a6:	887a      	ldrh	r2, [r7, #2]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027ac:	e002      	b.n	80027b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ae:	887a      	ldrh	r2, [r7, #2]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40007000 	.word	0x40007000

080027dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ea:	d130      	bne.n	800284e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ec:	4b23      	ldr	r3, [pc, #140]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f8:	d038      	beq.n	800286c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002802:	4a1e      	ldr	r2, [pc, #120]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002804:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002808:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2232      	movs	r2, #50	; 0x32
 8002810:	fb02 f303 	mul.w	r3, r2, r3
 8002814:	4a1b      	ldr	r2, [pc, #108]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0c9b      	lsrs	r3, r3, #18
 800281c:	3301      	adds	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002820:	e002      	b.n	8002828 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3b01      	subs	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002834:	d102      	bne.n	800283c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f2      	bne.n	8002822 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002848:	d110      	bne.n	800286c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e00f      	b.n	800286e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800285a:	d007      	beq.n	800286c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002864:	4a05      	ldr	r2, [pc, #20]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800286a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40007000 	.word	0x40007000
 8002880:	2000000c 	.word	0x2000000c
 8002884:	431bde83 	.word	0x431bde83

08002888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e3d4      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289a:	4ba1      	ldr	r3, [pc, #644]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a4:	4b9e      	ldr	r3, [pc, #632]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80e4 	beq.w	8002a84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <HAL_RCC_OscConfig+0x4a>
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2b0c      	cmp	r3, #12
 80028c6:	f040 808b 	bne.w	80029e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	f040 8087 	bne.w	80029e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028d2:	4b93      	ldr	r3, [pc, #588]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <HAL_RCC_OscConfig+0x62>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e3ac      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1a      	ldr	r2, [r3, #32]
 80028ee:	4b8c      	ldr	r3, [pc, #560]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <HAL_RCC_OscConfig+0x7c>
 80028fa:	4b89      	ldr	r3, [pc, #548]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002902:	e005      	b.n	8002910 <HAL_RCC_OscConfig+0x88>
 8002904:	4b86      	ldr	r3, [pc, #536]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002910:	4293      	cmp	r3, r2
 8002912:	d223      	bcs.n	800295c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	4618      	mov	r0, r3
 800291a:	f000 fd41 	bl	80033a0 <RCC_SetFlashLatencyFromMSIRange>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e38d      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002928:	4b7d      	ldr	r3, [pc, #500]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a7c      	ldr	r2, [pc, #496]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 800292e:	f043 0308 	orr.w	r3, r3, #8
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b7a      	ldr	r3, [pc, #488]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4977      	ldr	r1, [pc, #476]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	4972      	ldr	r1, [pc, #456]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
 800295a:	e025      	b.n	80029a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800295c:	4b70      	ldr	r3, [pc, #448]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6f      	ldr	r2, [pc, #444]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002962:	f043 0308 	orr.w	r3, r3, #8
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	496a      	ldr	r1, [pc, #424]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800297a:	4b69      	ldr	r3, [pc, #420]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	4965      	ldr	r1, [pc, #404]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d109      	bne.n	80029a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fd01 	bl	80033a0 <RCC_SetFlashLatencyFromMSIRange>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e34d      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029a8:	f000 fc36 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80029ac:	4602      	mov	r2, r0
 80029ae:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	495a      	ldr	r1, [pc, #360]	; (8002b24 <HAL_RCC_OscConfig+0x29c>)
 80029ba:	5ccb      	ldrb	r3, [r1, r3]
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
 80029c4:	4a58      	ldr	r2, [pc, #352]	; (8002b28 <HAL_RCC_OscConfig+0x2a0>)
 80029c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029c8:	4b58      	ldr	r3, [pc, #352]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe f9cd 	bl	8000d6c <HAL_InitTick>
 80029d2:	4603      	mov	r3, r0
 80029d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d052      	beq.n	8002a82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	e331      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d032      	beq.n	8002a4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029e8:	4b4d      	ldr	r3, [pc, #308]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a4c      	ldr	r2, [pc, #304]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029f4:	f7fe fa0a 	bl	8000e0c <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029fc:	f7fe fa06 	bl	8000e0c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e31a      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a0e:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a1a:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a40      	ldr	r2, [pc, #256]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a20:	f043 0308 	orr.w	r3, r3, #8
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	493b      	ldr	r1, [pc, #236]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a38:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	4936      	ldr	r1, [pc, #216]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
 8002a4c:	e01a      	b.n	8002a84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a4e:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a33      	ldr	r2, [pc, #204]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a5a:	f7fe f9d7 	bl	8000e0c <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a62:	f7fe f9d3 	bl	8000e0c <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e2e7      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a74:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x1da>
 8002a80:	e000      	b.n	8002a84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d074      	beq.n	8002b7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x21a>
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	d10e      	bne.n	8002aba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d10b      	bne.n	8002aba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d064      	beq.n	8002b78 <HAL_RCC_OscConfig+0x2f0>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d160      	bne.n	8002b78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e2c4      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x24a>
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a15      	ldr	r2, [pc, #84]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	e01d      	b.n	8002b0e <HAL_RCC_OscConfig+0x286>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ada:	d10c      	bne.n	8002af6 <HAL_RCC_OscConfig+0x26e>
 8002adc:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002ae2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	e00b      	b.n	8002b0e <HAL_RCC_OscConfig+0x286>
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a06      	ldr	r2, [pc, #24]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d01c      	beq.n	8002b50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe f979 	bl	8000e0c <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1c:	e011      	b.n	8002b42 <HAL_RCC_OscConfig+0x2ba>
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	0800506c 	.word	0x0800506c
 8002b28:	2000000c 	.word	0x2000000c
 8002b2c:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b30:	f7fe f96c 	bl	8000e0c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	; 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e280      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b42:	4baf      	ldr	r3, [pc, #700]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x2a8>
 8002b4e:	e014      	b.n	8002b7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe f95c 	bl	8000e0c <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b58:	f7fe f958 	bl	8000e0c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e26c      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b6a:	4ba5      	ldr	r3, [pc, #660]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x2d0>
 8002b76:	e000      	b.n	8002b7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d060      	beq.n	8002c48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_OscConfig+0x310>
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b0c      	cmp	r3, #12
 8002b90:	d119      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d116      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b98:	4b99      	ldr	r3, [pc, #612]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x328>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e249      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb0:	4b93      	ldr	r3, [pc, #588]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	4990      	ldr	r1, [pc, #576]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bc4:	e040      	b.n	8002c48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d023      	beq.n	8002c16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bce:	4b8c      	ldr	r3, [pc, #560]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a8b      	ldr	r2, [pc, #556]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bda:	f7fe f917 	bl	8000e0c <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be2:	f7fe f913 	bl	8000e0c <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e227      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf4:	4b82      	ldr	r3, [pc, #520]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c00:	4b7f      	ldr	r3, [pc, #508]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	497c      	ldr	r1, [pc, #496]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
 8002c14:	e018      	b.n	8002c48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c16:	4b7a      	ldr	r3, [pc, #488]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a79      	ldr	r2, [pc, #484]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7fe f8f3 	bl	8000e0c <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2a:	f7fe f8ef 	bl	8000e0c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e203      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c3c:	4b70      	ldr	r3, [pc, #448]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f0      	bne.n	8002c2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d03c      	beq.n	8002cce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01c      	beq.n	8002c96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5c:	4b68      	ldr	r3, [pc, #416]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c62:	4a67      	ldr	r2, [pc, #412]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6c:	f7fe f8ce 	bl	8000e0c <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c74:	f7fe f8ca 	bl	8000e0c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e1de      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c86:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0ef      	beq.n	8002c74 <HAL_RCC_OscConfig+0x3ec>
 8002c94:	e01b      	b.n	8002cce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c96:	4b5a      	ldr	r3, [pc, #360]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9c:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca6:	f7fe f8b1 	bl	8000e0c <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cae:	f7fe f8ad 	bl	8000e0c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e1c1      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc0:	4b4f      	ldr	r3, [pc, #316]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1ef      	bne.n	8002cae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80a6 	beq.w	8002e28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ce0:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10d      	bne.n	8002d08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cec:	4b44      	ldr	r3, [pc, #272]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	4a43      	ldr	r2, [pc, #268]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf8:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d04:	2301      	movs	r3, #1
 8002d06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d08:	4b3e      	ldr	r3, [pc, #248]	; (8002e04 <HAL_RCC_OscConfig+0x57c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d118      	bne.n	8002d46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d14:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <HAL_RCC_OscConfig+0x57c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a3a      	ldr	r2, [pc, #232]	; (8002e04 <HAL_RCC_OscConfig+0x57c>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d20:	f7fe f874 	bl	8000e0c <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d28:	f7fe f870 	bl	8000e0c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e184      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d3a:	4b32      	ldr	r3, [pc, #200]	; (8002e04 <HAL_RCC_OscConfig+0x57c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d108      	bne.n	8002d60 <HAL_RCC_OscConfig+0x4d8>
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	4a2a      	ldr	r2, [pc, #168]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d5e:	e024      	b.n	8002daa <HAL_RCC_OscConfig+0x522>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d110      	bne.n	8002d8a <HAL_RCC_OscConfig+0x502>
 8002d68:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6e:	4a24      	ldr	r2, [pc, #144]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d78:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7e:	4a20      	ldr	r2, [pc, #128]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d88:	e00f      	b.n	8002daa <HAL_RCC_OscConfig+0x522>
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d90:	4a1b      	ldr	r2, [pc, #108]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da0:	4a17      	ldr	r2, [pc, #92]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002da2:	f023 0304 	bic.w	r3, r3, #4
 8002da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d016      	beq.n	8002de0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db2:	f7fe f82b 	bl	8000e0c <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe f827 	bl	8000e0c <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e139      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0ed      	beq.n	8002dba <HAL_RCC_OscConfig+0x532>
 8002dde:	e01a      	b.n	8002e16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fe f814 	bl	8000e0c <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002de6:	e00f      	b.n	8002e08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de8:	f7fe f810 	bl	8000e0c <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d906      	bls.n	8002e08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e122      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e08:	4b90      	ldr	r3, [pc, #576]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e8      	bne.n	8002de8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e16:	7ffb      	ldrb	r3, [r7, #31]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d105      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1c:	4b8b      	ldr	r3, [pc, #556]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	4a8a      	ldr	r2, [pc, #552]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8108 	beq.w	8003042 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	f040 80d0 	bne.w	8002fdc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e3c:	4b83      	ldr	r3, [pc, #524]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f003 0203 	and.w	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d130      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d127      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d11f      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e7c:	2a07      	cmp	r2, #7
 8002e7e:	bf14      	ite	ne
 8002e80:	2201      	movne	r2, #1
 8002e82:	2200      	moveq	r2, #0
 8002e84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d113      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	3b01      	subs	r3, #1
 8002e98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d109      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	085b      	lsrs	r3, r3, #1
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d06e      	beq.n	8002f90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b0c      	cmp	r3, #12
 8002eb6:	d069      	beq.n	8002f8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002eb8:	4b64      	ldr	r3, [pc, #400]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d105      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ec4:	4b61      	ldr	r3, [pc, #388]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0b7      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ed4:	4b5d      	ldr	r3, [pc, #372]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a5c      	ldr	r2, [pc, #368]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ede:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ee0:	f7fd ff94 	bl	8000e0c <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7fd ff90 	bl	8000e0c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e0a4      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002efa:	4b54      	ldr	r3, [pc, #336]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f06:	4b51      	ldr	r3, [pc, #324]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	4b51      	ldr	r3, [pc, #324]	; (8003050 <HAL_RCC_OscConfig+0x7c8>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f16:	3a01      	subs	r2, #1
 8002f18:	0112      	lsls	r2, r2, #4
 8002f1a:	4311      	orrs	r1, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f20:	0212      	lsls	r2, r2, #8
 8002f22:	4311      	orrs	r1, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f28:	0852      	lsrs	r2, r2, #1
 8002f2a:	3a01      	subs	r2, #1
 8002f2c:	0552      	lsls	r2, r2, #21
 8002f2e:	4311      	orrs	r1, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f34:	0852      	lsrs	r2, r2, #1
 8002f36:	3a01      	subs	r2, #1
 8002f38:	0652      	lsls	r2, r2, #25
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f40:	0912      	lsrs	r2, r2, #4
 8002f42:	0452      	lsls	r2, r2, #17
 8002f44:	430a      	orrs	r2, r1
 8002f46:	4941      	ldr	r1, [pc, #260]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f4c:	4b3f      	ldr	r3, [pc, #252]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3e      	ldr	r2, [pc, #248]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f58:	4b3c      	ldr	r3, [pc, #240]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4a3b      	ldr	r2, [pc, #236]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f64:	f7fd ff52 	bl	8000e0c <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fd ff4e 	bl	8000e0c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e062      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7e:	4b33      	ldr	r3, [pc, #204]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f8a:	e05a      	b.n	8003042 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e059      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f90:	4b2e      	ldr	r3, [pc, #184]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d152      	bne.n	8003042 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a2a      	ldr	r2, [pc, #168]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fa8:	4b28      	ldr	r3, [pc, #160]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4a27      	ldr	r2, [pc, #156]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fb4:	f7fd ff2a 	bl	8000e0c <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fd ff26 	bl	8000e0c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e03a      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fce:	4b1f      	ldr	r3, [pc, #124]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x734>
 8002fda:	e032      	b.n	8003042 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d02d      	beq.n	800303e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe2:	4b1a      	ldr	r3, [pc, #104]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a19      	ldr	r2, [pc, #100]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002fe8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002fee:	4b17      	ldr	r3, [pc, #92]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d105      	bne.n	8003006 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ffa:	4b14      	ldr	r3, [pc, #80]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	4a13      	ldr	r2, [pc, #76]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8003000:	f023 0303 	bic.w	r3, r3, #3
 8003004:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	4a10      	ldr	r2, [pc, #64]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 800300c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003014:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003016:	f7fd fef9 	bl	8000e0c <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301e:	f7fd fef5 	bl	8000e0c <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e009      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f0      	bne.n	800301e <HAL_RCC_OscConfig+0x796>
 800303c:	e001      	b.n	8003042 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40021000 	.word	0x40021000
 8003050:	f99d808c 	.word	0xf99d808c

08003054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0c8      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b66      	ldr	r3, [pc, #408]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d910      	bls.n	8003098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b63      	ldr	r3, [pc, #396]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 0207 	bic.w	r2, r3, #7
 800307e:	4961      	ldr	r1, [pc, #388]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b5f      	ldr	r3, [pc, #380]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0b0      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d04c      	beq.n	800313e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ac:	4b56      	ldr	r3, [pc, #344]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d121      	bne.n	80030fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e09e      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d107      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030c4:	4b50      	ldr	r3, [pc, #320]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d115      	bne.n	80030fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e092      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d107      	bne.n	80030ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030dc:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d109      	bne.n	80030fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e086      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ec:	4b46      	ldr	r3, [pc, #280]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e07e      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030fc:	4b42      	ldr	r3, [pc, #264]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 0203 	bic.w	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	493f      	ldr	r1, [pc, #252]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310e:	f7fd fe7d 	bl	8000e0c <HAL_GetTick>
 8003112:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003114:	e00a      	b.n	800312c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003116:	f7fd fe79 	bl	8000e0c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f241 3288 	movw	r2, #5000	; 0x1388
 8003124:	4293      	cmp	r3, r2
 8003126:	d901      	bls.n	800312c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e066      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 020c 	and.w	r2, r3, #12
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	429a      	cmp	r2, r3
 800313c:	d1eb      	bne.n	8003116 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314a:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	492c      	ldr	r1, [pc, #176]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800315c:	4b29      	ldr	r3, [pc, #164]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d210      	bcs.n	800318c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 0207 	bic.w	r2, r3, #7
 8003172:	4924      	ldr	r1, [pc, #144]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b22      	ldr	r3, [pc, #136]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e036      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4918      	ldr	r1, [pc, #96]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031b6:	4b14      	ldr	r3, [pc, #80]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4910      	ldr	r1, [pc, #64]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ca:	f000 f825 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80031ce:	4602      	mov	r2, r0
 80031d0:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	490c      	ldr	r1, [pc, #48]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 80031dc:	5ccb      	ldrb	r3, [r1, r3]
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	fa22 f303 	lsr.w	r3, r2, r3
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd fdbc 	bl	8000d6c <HAL_InitTick>
 80031f4:	4603      	mov	r3, r0
 80031f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80031f8:	7afb      	ldrb	r3, [r7, #11]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40022000 	.word	0x40022000
 8003208:	40021000 	.word	0x40021000
 800320c:	0800506c 	.word	0x0800506c
 8003210:	2000000c 	.word	0x2000000c
 8003214:	20000010 	.word	0x20000010

08003218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003226:	4b3e      	ldr	r3, [pc, #248]	; (8003320 <HAL_RCC_GetSysClockFreq+0x108>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003230:	4b3b      	ldr	r3, [pc, #236]	; (8003320 <HAL_RCC_GetSysClockFreq+0x108>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x34>
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b0c      	cmp	r3, #12
 8003244:	d121      	bne.n	800328a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d11e      	bne.n	800328a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800324c:	4b34      	ldr	r3, [pc, #208]	; (8003320 <HAL_RCC_GetSysClockFreq+0x108>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d107      	bne.n	8003268 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003258:	4b31      	ldr	r3, [pc, #196]	; (8003320 <HAL_RCC_GetSysClockFreq+0x108>)
 800325a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	e005      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003268:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <HAL_RCC_GetSysClockFreq+0x108>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003274:	4a2b      	ldr	r2, [pc, #172]	; (8003324 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10d      	bne.n	80032a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003288:	e00a      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b04      	cmp	r3, #4
 800328e:	d102      	bne.n	8003296 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003290:	4b25      	ldr	r3, [pc, #148]	; (8003328 <HAL_RCC_GetSysClockFreq+0x110>)
 8003292:	61bb      	str	r3, [r7, #24]
 8003294:	e004      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800329c:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_RCC_GetSysClockFreq+0x114>)
 800329e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d134      	bne.n	8003310 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032a6:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <HAL_RCC_GetSysClockFreq+0x108>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d003      	beq.n	80032be <HAL_RCC_GetSysClockFreq+0xa6>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d003      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0xac>
 80032bc:	e005      	b.n	80032ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032be:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <HAL_RCC_GetSysClockFreq+0x110>)
 80032c0:	617b      	str	r3, [r7, #20]
      break;
 80032c2:	e005      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_RCC_GetSysClockFreq+0x114>)
 80032c6:	617b      	str	r3, [r7, #20]
      break;
 80032c8:	e002      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	617b      	str	r3, [r7, #20]
      break;
 80032ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	3301      	adds	r3, #1
 80032dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	0a1b      	lsrs	r3, r3, #8
 80032e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	fb02 f203 	mul.w	r2, r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HAL_RCC_GetSysClockFreq+0x108>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	0e5b      	lsrs	r3, r3, #25
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	3301      	adds	r3, #1
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	fbb2 f3f3 	udiv	r3, r2, r3
 800330e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003310:	69bb      	ldr	r3, [r7, #24]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3724      	adds	r7, #36	; 0x24
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	08005084 	.word	0x08005084
 8003328:	00f42400 	.word	0x00f42400
 800332c:	007a1200 	.word	0x007a1200

08003330 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003334:	4b03      	ldr	r3, [pc, #12]	; (8003344 <HAL_RCC_GetHCLKFreq+0x14>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	2000000c 	.word	0x2000000c

08003348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800334c:	f7ff fff0 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 8003350:	4602      	mov	r2, r0
 8003352:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	0a1b      	lsrs	r3, r3, #8
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	4904      	ldr	r1, [pc, #16]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800335e:	5ccb      	ldrb	r3, [r1, r3]
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40021000 	.word	0x40021000
 8003370:	0800507c 	.word	0x0800507c

08003374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003378:	f7ff ffda 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	0adb      	lsrs	r3, r3, #11
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	4904      	ldr	r1, [pc, #16]	; (800339c <HAL_RCC_GetPCLK2Freq+0x28>)
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40021000 	.word	0x40021000
 800339c:	0800507c 	.word	0x0800507c

080033a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033ac:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033b8:	f7ff fa02 	bl	80027c0 <HAL_PWREx_GetVoltageRange>
 80033bc:	6178      	str	r0, [r7, #20]
 80033be:	e014      	b.n	80033ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033c0:	4b25      	ldr	r3, [pc, #148]	; (8003458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c4:	4a24      	ldr	r2, [pc, #144]	; (8003458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ca:	6593      	str	r3, [r2, #88]	; 0x58
 80033cc:	4b22      	ldr	r3, [pc, #136]	; (8003458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033d8:	f7ff f9f2 	bl	80027c0 <HAL_PWREx_GetVoltageRange>
 80033dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033de:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e2:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f0:	d10b      	bne.n	800340a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b80      	cmp	r3, #128	; 0x80
 80033f6:	d919      	bls.n	800342c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2ba0      	cmp	r3, #160	; 0xa0
 80033fc:	d902      	bls.n	8003404 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033fe:	2302      	movs	r3, #2
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	e013      	b.n	800342c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003404:	2301      	movs	r3, #1
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	e010      	b.n	800342c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b80      	cmp	r3, #128	; 0x80
 800340e:	d902      	bls.n	8003416 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003410:	2303      	movs	r3, #3
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	e00a      	b.n	800342c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b80      	cmp	r3, #128	; 0x80
 800341a:	d102      	bne.n	8003422 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800341c:	2302      	movs	r3, #2
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	e004      	b.n	800342c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b70      	cmp	r3, #112	; 0x70
 8003426:	d101      	bne.n	800342c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003428:	2301      	movs	r3, #1
 800342a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f023 0207 	bic.w	r2, r3, #7
 8003434:	4909      	ldr	r1, [pc, #36]	; (800345c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800343c:	4b07      	ldr	r3, [pc, #28]	; (800345c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	429a      	cmp	r2, r3
 8003448:	d001      	beq.n	800344e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40021000 	.word	0x40021000
 800345c:	40022000 	.word	0x40022000

08003460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003468:	2300      	movs	r3, #0
 800346a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800346c:	2300      	movs	r3, #0
 800346e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003478:	2b00      	cmp	r3, #0
 800347a:	d041      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003480:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003484:	d02a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003486:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800348a:	d824      	bhi.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800348c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003490:	d008      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003492:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003496:	d81e      	bhi.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800349c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034a0:	d010      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034a2:	e018      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034a4:	4b86      	ldr	r3, [pc, #536]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4a85      	ldr	r2, [pc, #532]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034b0:	e015      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3304      	adds	r3, #4
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fabb 	bl	8003a34 <RCCEx_PLLSAI1_Config>
 80034be:	4603      	mov	r3, r0
 80034c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034c2:	e00c      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3320      	adds	r3, #32
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fba6 	bl	8003c1c <RCCEx_PLLSAI2_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034d4:	e003      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	74fb      	strb	r3, [r7, #19]
      break;
 80034da:	e000      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034de:	7cfb      	ldrb	r3, [r7, #19]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10b      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034e4:	4b76      	ldr	r3, [pc, #472]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f2:	4973      	ldr	r1, [pc, #460]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034fa:	e001      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fc:	7cfb      	ldrb	r3, [r7, #19]
 80034fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d041      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003510:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003514:	d02a      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003516:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800351a:	d824      	bhi.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800351c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003520:	d008      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003526:	d81e      	bhi.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800352c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003530:	d010      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003532:	e018      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003534:	4b62      	ldr	r3, [pc, #392]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4a61      	ldr	r2, [pc, #388]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003540:	e015      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3304      	adds	r3, #4
 8003546:	2100      	movs	r1, #0
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fa73 	bl	8003a34 <RCCEx_PLLSAI1_Config>
 800354e:	4603      	mov	r3, r0
 8003550:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003552:	e00c      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3320      	adds	r3, #32
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fb5e 	bl	8003c1c <RCCEx_PLLSAI2_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003564:	e003      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	74fb      	strb	r3, [r7, #19]
      break;
 800356a:	e000      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800356c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800356e:	7cfb      	ldrb	r3, [r7, #19]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10b      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003574:	4b52      	ldr	r3, [pc, #328]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003582:	494f      	ldr	r1, [pc, #316]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800358a:	e001      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80a0 	beq.w	80036de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035a2:	4b47      	ldr	r3, [pc, #284]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80035b2:	2300      	movs	r3, #0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00d      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b8:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	4a40      	ldr	r2, [pc, #256]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c2:	6593      	str	r3, [r2, #88]	; 0x58
 80035c4:	4b3e      	ldr	r3, [pc, #248]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d0:	2301      	movs	r3, #1
 80035d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035d4:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a3a      	ldr	r2, [pc, #232]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035e0:	f7fd fc14 	bl	8000e0c <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035e6:	e009      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e8:	f7fd fc10 	bl	8000e0c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d902      	bls.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	74fb      	strb	r3, [r7, #19]
        break;
 80035fa:	e005      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035fc:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ef      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003608:	7cfb      	ldrb	r3, [r7, #19]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d15c      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800360e:	4b2c      	ldr	r3, [pc, #176]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003618:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d01f      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	429a      	cmp	r2, r3
 800362a:	d019      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800362c:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003636:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003638:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363e:	4a20      	ldr	r2, [pc, #128]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003648:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364e:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d016      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366a:	f7fd fbcf 	bl	8000e0c <HAL_GetTick>
 800366e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003670:	e00b      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fd fbcb 	bl	8000e0c <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d902      	bls.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	74fb      	strb	r3, [r7, #19]
            break;
 8003688:	e006      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800368a:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0ec      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10c      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800369e:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ae:	4904      	ldr	r1, [pc, #16]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036b6:	e009      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036b8:	7cfb      	ldrb	r3, [r7, #19]
 80036ba:	74bb      	strb	r3, [r7, #18]
 80036bc:	e006      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80036be:	bf00      	nop
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c8:	7cfb      	ldrb	r3, [r7, #19]
 80036ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036cc:	7c7b      	ldrb	r3, [r7, #17]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d105      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d2:	4b9e      	ldr	r3, [pc, #632]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d6:	4a9d      	ldr	r2, [pc, #628]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ea:	4b98      	ldr	r3, [pc, #608]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f0:	f023 0203 	bic.w	r2, r3, #3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	4994      	ldr	r1, [pc, #592]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800370c:	4b8f      	ldr	r3, [pc, #572]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	f023 020c 	bic.w	r2, r3, #12
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	498c      	ldr	r1, [pc, #560]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800372e:	4b87      	ldr	r3, [pc, #540]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003734:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	4983      	ldr	r1, [pc, #524]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003750:	4b7e      	ldr	r3, [pc, #504]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003756:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	497b      	ldr	r1, [pc, #492]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003772:	4b76      	ldr	r3, [pc, #472]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003780:	4972      	ldr	r1, [pc, #456]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003794:	4b6d      	ldr	r3, [pc, #436]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a2:	496a      	ldr	r1, [pc, #424]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037b6:	4b65      	ldr	r3, [pc, #404]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c4:	4961      	ldr	r1, [pc, #388]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037d8:	4b5c      	ldr	r3, [pc, #368]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e6:	4959      	ldr	r1, [pc, #356]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037fa:	4b54      	ldr	r3, [pc, #336]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003800:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003808:	4950      	ldr	r1, [pc, #320]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800381c:	4b4b      	ldr	r3, [pc, #300]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	4948      	ldr	r1, [pc, #288]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800383e:	4b43      	ldr	r3, [pc, #268]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003844:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	493f      	ldr	r1, [pc, #252]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d028      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003860:	4b3a      	ldr	r3, [pc, #232]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800386e:	4937      	ldr	r1, [pc, #220]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800387a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800387e:	d106      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003880:	4b32      	ldr	r3, [pc, #200]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4a31      	ldr	r2, [pc, #196]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800388a:	60d3      	str	r3, [r2, #12]
 800388c:	e011      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003892:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003896:	d10c      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3304      	adds	r3, #4
 800389c:	2101      	movs	r1, #1
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 f8c8 	bl	8003a34 <RCCEx_PLLSAI1_Config>
 80038a4:	4603      	mov	r3, r0
 80038a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038a8:	7cfb      	ldrb	r3, [r7, #19]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80038ae:	7cfb      	ldrb	r3, [r7, #19]
 80038b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d028      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038be:	4b23      	ldr	r3, [pc, #140]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038cc:	491f      	ldr	r1, [pc, #124]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038dc:	d106      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038de:	4b1b      	ldr	r3, [pc, #108]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	4a1a      	ldr	r2, [pc, #104]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038e8:	60d3      	str	r3, [r2, #12]
 80038ea:	e011      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038f4:	d10c      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	2101      	movs	r1, #1
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 f899 	bl	8003a34 <RCCEx_PLLSAI1_Config>
 8003902:	4603      	mov	r3, r0
 8003904:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003906:	7cfb      	ldrb	r3, [r7, #19]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800390c:	7cfb      	ldrb	r3, [r7, #19]
 800390e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d02b      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392a:	4908      	ldr	r1, [pc, #32]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003936:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800393a:	d109      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4a02      	ldr	r2, [pc, #8]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003946:	60d3      	str	r3, [r2, #12]
 8003948:	e014      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800394a:	bf00      	nop
 800394c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003954:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003958:	d10c      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	2101      	movs	r1, #1
 8003960:	4618      	mov	r0, r3
 8003962:	f000 f867 	bl	8003a34 <RCCEx_PLLSAI1_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800396a:	7cfb      	ldrb	r3, [r7, #19]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003970:	7cfb      	ldrb	r3, [r7, #19]
 8003972:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d02f      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003980:	4b2b      	ldr	r3, [pc, #172]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003986:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800398e:	4928      	ldr	r1, [pc, #160]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800399a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800399e:	d10d      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	2102      	movs	r1, #2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 f844 	bl	8003a34 <RCCEx_PLLSAI1_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b0:	7cfb      	ldrb	r3, [r7, #19]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d014      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039b6:	7cfb      	ldrb	r3, [r7, #19]
 80039b8:	74bb      	strb	r3, [r7, #18]
 80039ba:	e011      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3320      	adds	r3, #32
 80039ca:	2102      	movs	r1, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 f925 	bl	8003c1c <RCCEx_PLLSAI2_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039d6:	7cfb      	ldrb	r3, [r7, #19]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039dc:	7cfb      	ldrb	r3, [r7, #19]
 80039de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039ec:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039fa:	490d      	ldr	r1, [pc, #52]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a0e:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a1e:	4904      	ldr	r1, [pc, #16]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a26:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40021000 	.word	0x40021000

08003a34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a42:	4b75      	ldr	r3, [pc, #468]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d018      	beq.n	8003a80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a4e:	4b72      	ldr	r3, [pc, #456]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0203 	and.w	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d10d      	bne.n	8003a7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
       ||
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a66:	4b6c      	ldr	r3, [pc, #432]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	091b      	lsrs	r3, r3, #4
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
       ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d047      	beq.n	8003b0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
 8003a7e:	e044      	b.n	8003b0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d018      	beq.n	8003aba <RCCEx_PLLSAI1_Config+0x86>
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d825      	bhi.n	8003ad8 <RCCEx_PLLSAI1_Config+0xa4>
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d002      	beq.n	8003a96 <RCCEx_PLLSAI1_Config+0x62>
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d009      	beq.n	8003aa8 <RCCEx_PLLSAI1_Config+0x74>
 8003a94:	e020      	b.n	8003ad8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a96:	4b60      	ldr	r3, [pc, #384]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d11d      	bne.n	8003ade <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa6:	e01a      	b.n	8003ade <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003aa8:	4b5b      	ldr	r3, [pc, #364]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d116      	bne.n	8003ae2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab8:	e013      	b.n	8003ae2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aba:	4b57      	ldr	r3, [pc, #348]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10f      	bne.n	8003ae6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ac6:	4b54      	ldr	r3, [pc, #336]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ad6:	e006      	b.n	8003ae6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	73fb      	strb	r3, [r7, #15]
      break;
 8003adc:	e004      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e002      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ae6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10d      	bne.n	8003b0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003aee:	4b4a      	ldr	r3, [pc, #296]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6819      	ldr	r1, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	430b      	orrs	r3, r1
 8003b04:	4944      	ldr	r1, [pc, #272]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d17d      	bne.n	8003c0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b10:	4b41      	ldr	r3, [pc, #260]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a40      	ldr	r2, [pc, #256]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b1c:	f7fd f976 	bl	8000e0c <HAL_GetTick>
 8003b20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b22:	e009      	b.n	8003b38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b24:	f7fd f972 	bl	8000e0c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d902      	bls.n	8003b38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	73fb      	strb	r3, [r7, #15]
        break;
 8003b36:	e005      	b.n	8003b44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b38:	4b37      	ldr	r3, [pc, #220]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1ef      	bne.n	8003b24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d160      	bne.n	8003c0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d111      	bne.n	8003b74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b50:	4b31      	ldr	r3, [pc, #196]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6892      	ldr	r2, [r2, #8]
 8003b60:	0211      	lsls	r1, r2, #8
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68d2      	ldr	r2, [r2, #12]
 8003b66:	0912      	lsrs	r2, r2, #4
 8003b68:	0452      	lsls	r2, r2, #17
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	492a      	ldr	r1, [pc, #168]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	610b      	str	r3, [r1, #16]
 8003b72:	e027      	b.n	8003bc4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d112      	bne.n	8003ba0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b7a:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6892      	ldr	r2, [r2, #8]
 8003b8a:	0211      	lsls	r1, r2, #8
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6912      	ldr	r2, [r2, #16]
 8003b90:	0852      	lsrs	r2, r2, #1
 8003b92:	3a01      	subs	r2, #1
 8003b94:	0552      	lsls	r2, r2, #21
 8003b96:	430a      	orrs	r2, r1
 8003b98:	491f      	ldr	r1, [pc, #124]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	610b      	str	r3, [r1, #16]
 8003b9e:	e011      	b.n	8003bc4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ba0:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ba8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6892      	ldr	r2, [r2, #8]
 8003bb0:	0211      	lsls	r1, r2, #8
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6952      	ldr	r2, [r2, #20]
 8003bb6:	0852      	lsrs	r2, r2, #1
 8003bb8:	3a01      	subs	r2, #1
 8003bba:	0652      	lsls	r2, r2, #25
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	4916      	ldr	r1, [pc, #88]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fd f91c 	bl	8000e0c <HAL_GetTick>
 8003bd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bd6:	e009      	b.n	8003bec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bd8:	f7fd f918 	bl	8000e0c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d902      	bls.n	8003bec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	73fb      	strb	r3, [r7, #15]
          break;
 8003bea:	e005      	b.n	8003bf8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0ef      	beq.n	8003bd8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	4904      	ldr	r1, [pc, #16]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000

08003c1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c2a:	4b6a      	ldr	r3, [pc, #424]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d018      	beq.n	8003c68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c36:	4b67      	ldr	r3, [pc, #412]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f003 0203 	and.w	r2, r3, #3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d10d      	bne.n	8003c62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
       ||
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c4e:	4b61      	ldr	r3, [pc, #388]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
       ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d047      	beq.n	8003cf2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	73fb      	strb	r3, [r7, #15]
 8003c66:	e044      	b.n	8003cf2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d018      	beq.n	8003ca2 <RCCEx_PLLSAI2_Config+0x86>
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d825      	bhi.n	8003cc0 <RCCEx_PLLSAI2_Config+0xa4>
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d002      	beq.n	8003c7e <RCCEx_PLLSAI2_Config+0x62>
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d009      	beq.n	8003c90 <RCCEx_PLLSAI2_Config+0x74>
 8003c7c:	e020      	b.n	8003cc0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c7e:	4b55      	ldr	r3, [pc, #340]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d11d      	bne.n	8003cc6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c8e:	e01a      	b.n	8003cc6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c90:	4b50      	ldr	r3, [pc, #320]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d116      	bne.n	8003cca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca0:	e013      	b.n	8003cca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ca2:	4b4c      	ldr	r3, [pc, #304]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10f      	bne.n	8003cce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cae:	4b49      	ldr	r3, [pc, #292]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cbe:	e006      	b.n	8003cce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc4:	e004      	b.n	8003cd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cc6:	bf00      	nop
 8003cc8:	e002      	b.n	8003cd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cce:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10d      	bne.n	8003cf2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cd6:	4b3f      	ldr	r3, [pc, #252]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6819      	ldr	r1, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	430b      	orrs	r3, r1
 8003cec:	4939      	ldr	r1, [pc, #228]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d167      	bne.n	8003dc8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003cf8:	4b36      	ldr	r3, [pc, #216]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a35      	ldr	r2, [pc, #212]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d04:	f7fd f882 	bl	8000e0c <HAL_GetTick>
 8003d08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d0a:	e009      	b.n	8003d20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d0c:	f7fd f87e 	bl	8000e0c <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d902      	bls.n	8003d20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d1e:	e005      	b.n	8003d2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d20:	4b2c      	ldr	r3, [pc, #176]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1ef      	bne.n	8003d0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d14a      	bne.n	8003dc8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d111      	bne.n	8003d5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d38:	4b26      	ldr	r3, [pc, #152]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6892      	ldr	r2, [r2, #8]
 8003d48:	0211      	lsls	r1, r2, #8
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	68d2      	ldr	r2, [r2, #12]
 8003d4e:	0912      	lsrs	r2, r2, #4
 8003d50:	0452      	lsls	r2, r2, #17
 8003d52:	430a      	orrs	r2, r1
 8003d54:	491f      	ldr	r1, [pc, #124]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	614b      	str	r3, [r1, #20]
 8003d5a:	e011      	b.n	8003d80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6892      	ldr	r2, [r2, #8]
 8003d6c:	0211      	lsls	r1, r2, #8
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6912      	ldr	r2, [r2, #16]
 8003d72:	0852      	lsrs	r2, r2, #1
 8003d74:	3a01      	subs	r2, #1
 8003d76:	0652      	lsls	r2, r2, #25
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	4916      	ldr	r1, [pc, #88]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d80:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a13      	ldr	r2, [pc, #76]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fd f83e 	bl	8000e0c <HAL_GetTick>
 8003d90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d92:	e009      	b.n	8003da8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d94:	f7fd f83a 	bl	8000e0c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d902      	bls.n	8003da8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	73fb      	strb	r3, [r7, #15]
          break;
 8003da6:	e005      	b.n	8003db4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003da8:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0ef      	beq.n	8003d94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	4904      	ldr	r1, [pc, #16]	; (8003dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40021000 	.word	0x40021000

08003dd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e040      	b.n	8003e6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fc fe2e 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2224      	movs	r2, #36	; 0x24
 8003e04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0201 	bic.w	r2, r2, #1
 8003e14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f8c0 	bl	8003f9c <UART_SetConfig>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e022      	b.n	8003e6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fb3e 	bl	80044b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fbc5 	bl	80045f4 <UART_CheckIdleState>
 8003e6a:	4603      	mov	r3, r0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	; 0x28
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	f040 8082 	bne.w	8003f92 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_UART_Transmit+0x26>
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e07a      	b.n	8003f94 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_UART_Transmit+0x38>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e073      	b.n	8003f94 <HAL_UART_Transmit+0x120>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2221      	movs	r2, #33	; 0x21
 8003ec0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ec2:	f7fc ffa3 	bl	8000e0c <HAL_GetTick>
 8003ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee0:	d108      	bne.n	8003ef4 <HAL_UART_Transmit+0x80>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d104      	bne.n	8003ef4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	e003      	b.n	8003efc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f04:	e02d      	b.n	8003f62 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2180      	movs	r1, #128	; 0x80
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fbb8 	bl	8004686 <UART_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e039      	b.n	8003f94 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	881a      	ldrh	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f32:	b292      	uxth	r2, r2
 8003f34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	3302      	adds	r3, #2
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	e008      	b.n	8003f50 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	781a      	ldrb	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	b292      	uxth	r2, r2
 8003f48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1cb      	bne.n	8003f06 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2140      	movs	r1, #64	; 0x40
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fb84 	bl	8004686 <UART_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e005      	b.n	8003f94 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e000      	b.n	8003f94 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f92:	2302      	movs	r3, #2
  }
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3720      	adds	r7, #32
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f9c:	b5b0      	push	{r4, r5, r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4bad      	ldr	r3, [pc, #692]	; (800427c <UART_SetConfig+0x2e0>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	69f9      	ldr	r1, [r7, #28]
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4aa2      	ldr	r2, [pc, #648]	; (8004280 <UART_SetConfig+0x2e4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	4313      	orrs	r3, r2
 8004002:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	430a      	orrs	r2, r1
 8004016:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a99      	ldr	r2, [pc, #612]	; (8004284 <UART_SetConfig+0x2e8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d121      	bne.n	8004066 <UART_SetConfig+0xca>
 8004022:	4b99      	ldr	r3, [pc, #612]	; (8004288 <UART_SetConfig+0x2ec>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	2b03      	cmp	r3, #3
 800402e:	d817      	bhi.n	8004060 <UART_SetConfig+0xc4>
 8004030:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <UART_SetConfig+0x9c>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	08004049 	.word	0x08004049
 800403c:	08004055 	.word	0x08004055
 8004040:	0800404f 	.word	0x0800404f
 8004044:	0800405b 	.word	0x0800405b
 8004048:	2301      	movs	r3, #1
 800404a:	76fb      	strb	r3, [r7, #27]
 800404c:	e0e7      	b.n	800421e <UART_SetConfig+0x282>
 800404e:	2302      	movs	r3, #2
 8004050:	76fb      	strb	r3, [r7, #27]
 8004052:	e0e4      	b.n	800421e <UART_SetConfig+0x282>
 8004054:	2304      	movs	r3, #4
 8004056:	76fb      	strb	r3, [r7, #27]
 8004058:	e0e1      	b.n	800421e <UART_SetConfig+0x282>
 800405a:	2308      	movs	r3, #8
 800405c:	76fb      	strb	r3, [r7, #27]
 800405e:	e0de      	b.n	800421e <UART_SetConfig+0x282>
 8004060:	2310      	movs	r3, #16
 8004062:	76fb      	strb	r3, [r7, #27]
 8004064:	e0db      	b.n	800421e <UART_SetConfig+0x282>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a88      	ldr	r2, [pc, #544]	; (800428c <UART_SetConfig+0x2f0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d132      	bne.n	80040d6 <UART_SetConfig+0x13a>
 8004070:	4b85      	ldr	r3, [pc, #532]	; (8004288 <UART_SetConfig+0x2ec>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d828      	bhi.n	80040d0 <UART_SetConfig+0x134>
 800407e:	a201      	add	r2, pc, #4	; (adr r2, 8004084 <UART_SetConfig+0xe8>)
 8004080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004084:	080040b9 	.word	0x080040b9
 8004088:	080040d1 	.word	0x080040d1
 800408c:	080040d1 	.word	0x080040d1
 8004090:	080040d1 	.word	0x080040d1
 8004094:	080040c5 	.word	0x080040c5
 8004098:	080040d1 	.word	0x080040d1
 800409c:	080040d1 	.word	0x080040d1
 80040a0:	080040d1 	.word	0x080040d1
 80040a4:	080040bf 	.word	0x080040bf
 80040a8:	080040d1 	.word	0x080040d1
 80040ac:	080040d1 	.word	0x080040d1
 80040b0:	080040d1 	.word	0x080040d1
 80040b4:	080040cb 	.word	0x080040cb
 80040b8:	2300      	movs	r3, #0
 80040ba:	76fb      	strb	r3, [r7, #27]
 80040bc:	e0af      	b.n	800421e <UART_SetConfig+0x282>
 80040be:	2302      	movs	r3, #2
 80040c0:	76fb      	strb	r3, [r7, #27]
 80040c2:	e0ac      	b.n	800421e <UART_SetConfig+0x282>
 80040c4:	2304      	movs	r3, #4
 80040c6:	76fb      	strb	r3, [r7, #27]
 80040c8:	e0a9      	b.n	800421e <UART_SetConfig+0x282>
 80040ca:	2308      	movs	r3, #8
 80040cc:	76fb      	strb	r3, [r7, #27]
 80040ce:	e0a6      	b.n	800421e <UART_SetConfig+0x282>
 80040d0:	2310      	movs	r3, #16
 80040d2:	76fb      	strb	r3, [r7, #27]
 80040d4:	e0a3      	b.n	800421e <UART_SetConfig+0x282>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a6d      	ldr	r2, [pc, #436]	; (8004290 <UART_SetConfig+0x2f4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d120      	bne.n	8004122 <UART_SetConfig+0x186>
 80040e0:	4b69      	ldr	r3, [pc, #420]	; (8004288 <UART_SetConfig+0x2ec>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040ea:	2b30      	cmp	r3, #48	; 0x30
 80040ec:	d013      	beq.n	8004116 <UART_SetConfig+0x17a>
 80040ee:	2b30      	cmp	r3, #48	; 0x30
 80040f0:	d814      	bhi.n	800411c <UART_SetConfig+0x180>
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d009      	beq.n	800410a <UART_SetConfig+0x16e>
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d810      	bhi.n	800411c <UART_SetConfig+0x180>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <UART_SetConfig+0x168>
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d006      	beq.n	8004110 <UART_SetConfig+0x174>
 8004102:	e00b      	b.n	800411c <UART_SetConfig+0x180>
 8004104:	2300      	movs	r3, #0
 8004106:	76fb      	strb	r3, [r7, #27]
 8004108:	e089      	b.n	800421e <UART_SetConfig+0x282>
 800410a:	2302      	movs	r3, #2
 800410c:	76fb      	strb	r3, [r7, #27]
 800410e:	e086      	b.n	800421e <UART_SetConfig+0x282>
 8004110:	2304      	movs	r3, #4
 8004112:	76fb      	strb	r3, [r7, #27]
 8004114:	e083      	b.n	800421e <UART_SetConfig+0x282>
 8004116:	2308      	movs	r3, #8
 8004118:	76fb      	strb	r3, [r7, #27]
 800411a:	e080      	b.n	800421e <UART_SetConfig+0x282>
 800411c:	2310      	movs	r3, #16
 800411e:	76fb      	strb	r3, [r7, #27]
 8004120:	e07d      	b.n	800421e <UART_SetConfig+0x282>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a5b      	ldr	r2, [pc, #364]	; (8004294 <UART_SetConfig+0x2f8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d120      	bne.n	800416e <UART_SetConfig+0x1d2>
 800412c:	4b56      	ldr	r3, [pc, #344]	; (8004288 <UART_SetConfig+0x2ec>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004132:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004136:	2bc0      	cmp	r3, #192	; 0xc0
 8004138:	d013      	beq.n	8004162 <UART_SetConfig+0x1c6>
 800413a:	2bc0      	cmp	r3, #192	; 0xc0
 800413c:	d814      	bhi.n	8004168 <UART_SetConfig+0x1cc>
 800413e:	2b80      	cmp	r3, #128	; 0x80
 8004140:	d009      	beq.n	8004156 <UART_SetConfig+0x1ba>
 8004142:	2b80      	cmp	r3, #128	; 0x80
 8004144:	d810      	bhi.n	8004168 <UART_SetConfig+0x1cc>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <UART_SetConfig+0x1b4>
 800414a:	2b40      	cmp	r3, #64	; 0x40
 800414c:	d006      	beq.n	800415c <UART_SetConfig+0x1c0>
 800414e:	e00b      	b.n	8004168 <UART_SetConfig+0x1cc>
 8004150:	2300      	movs	r3, #0
 8004152:	76fb      	strb	r3, [r7, #27]
 8004154:	e063      	b.n	800421e <UART_SetConfig+0x282>
 8004156:	2302      	movs	r3, #2
 8004158:	76fb      	strb	r3, [r7, #27]
 800415a:	e060      	b.n	800421e <UART_SetConfig+0x282>
 800415c:	2304      	movs	r3, #4
 800415e:	76fb      	strb	r3, [r7, #27]
 8004160:	e05d      	b.n	800421e <UART_SetConfig+0x282>
 8004162:	2308      	movs	r3, #8
 8004164:	76fb      	strb	r3, [r7, #27]
 8004166:	e05a      	b.n	800421e <UART_SetConfig+0x282>
 8004168:	2310      	movs	r3, #16
 800416a:	76fb      	strb	r3, [r7, #27]
 800416c:	e057      	b.n	800421e <UART_SetConfig+0x282>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a49      	ldr	r2, [pc, #292]	; (8004298 <UART_SetConfig+0x2fc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d125      	bne.n	80041c4 <UART_SetConfig+0x228>
 8004178:	4b43      	ldr	r3, [pc, #268]	; (8004288 <UART_SetConfig+0x2ec>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004186:	d017      	beq.n	80041b8 <UART_SetConfig+0x21c>
 8004188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800418c:	d817      	bhi.n	80041be <UART_SetConfig+0x222>
 800418e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004192:	d00b      	beq.n	80041ac <UART_SetConfig+0x210>
 8004194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004198:	d811      	bhi.n	80041be <UART_SetConfig+0x222>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <UART_SetConfig+0x20a>
 800419e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a2:	d006      	beq.n	80041b2 <UART_SetConfig+0x216>
 80041a4:	e00b      	b.n	80041be <UART_SetConfig+0x222>
 80041a6:	2300      	movs	r3, #0
 80041a8:	76fb      	strb	r3, [r7, #27]
 80041aa:	e038      	b.n	800421e <UART_SetConfig+0x282>
 80041ac:	2302      	movs	r3, #2
 80041ae:	76fb      	strb	r3, [r7, #27]
 80041b0:	e035      	b.n	800421e <UART_SetConfig+0x282>
 80041b2:	2304      	movs	r3, #4
 80041b4:	76fb      	strb	r3, [r7, #27]
 80041b6:	e032      	b.n	800421e <UART_SetConfig+0x282>
 80041b8:	2308      	movs	r3, #8
 80041ba:	76fb      	strb	r3, [r7, #27]
 80041bc:	e02f      	b.n	800421e <UART_SetConfig+0x282>
 80041be:	2310      	movs	r3, #16
 80041c0:	76fb      	strb	r3, [r7, #27]
 80041c2:	e02c      	b.n	800421e <UART_SetConfig+0x282>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a2d      	ldr	r2, [pc, #180]	; (8004280 <UART_SetConfig+0x2e4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d125      	bne.n	800421a <UART_SetConfig+0x27e>
 80041ce:	4b2e      	ldr	r3, [pc, #184]	; (8004288 <UART_SetConfig+0x2ec>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041dc:	d017      	beq.n	800420e <UART_SetConfig+0x272>
 80041de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041e2:	d817      	bhi.n	8004214 <UART_SetConfig+0x278>
 80041e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e8:	d00b      	beq.n	8004202 <UART_SetConfig+0x266>
 80041ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ee:	d811      	bhi.n	8004214 <UART_SetConfig+0x278>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <UART_SetConfig+0x260>
 80041f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f8:	d006      	beq.n	8004208 <UART_SetConfig+0x26c>
 80041fa:	e00b      	b.n	8004214 <UART_SetConfig+0x278>
 80041fc:	2300      	movs	r3, #0
 80041fe:	76fb      	strb	r3, [r7, #27]
 8004200:	e00d      	b.n	800421e <UART_SetConfig+0x282>
 8004202:	2302      	movs	r3, #2
 8004204:	76fb      	strb	r3, [r7, #27]
 8004206:	e00a      	b.n	800421e <UART_SetConfig+0x282>
 8004208:	2304      	movs	r3, #4
 800420a:	76fb      	strb	r3, [r7, #27]
 800420c:	e007      	b.n	800421e <UART_SetConfig+0x282>
 800420e:	2308      	movs	r3, #8
 8004210:	76fb      	strb	r3, [r7, #27]
 8004212:	e004      	b.n	800421e <UART_SetConfig+0x282>
 8004214:	2310      	movs	r3, #16
 8004216:	76fb      	strb	r3, [r7, #27]
 8004218:	e001      	b.n	800421e <UART_SetConfig+0x282>
 800421a:	2310      	movs	r3, #16
 800421c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a17      	ldr	r2, [pc, #92]	; (8004280 <UART_SetConfig+0x2e4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	f040 8087 	bne.w	8004338 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800422a:	7efb      	ldrb	r3, [r7, #27]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d837      	bhi.n	80042a0 <UART_SetConfig+0x304>
 8004230:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <UART_SetConfig+0x29c>)
 8004232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004236:	bf00      	nop
 8004238:	0800425d 	.word	0x0800425d
 800423c:	080042a1 	.word	0x080042a1
 8004240:	08004265 	.word	0x08004265
 8004244:	080042a1 	.word	0x080042a1
 8004248:	0800426b 	.word	0x0800426b
 800424c:	080042a1 	.word	0x080042a1
 8004250:	080042a1 	.word	0x080042a1
 8004254:	080042a1 	.word	0x080042a1
 8004258:	08004273 	.word	0x08004273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800425c:	f7ff f874 	bl	8003348 <HAL_RCC_GetPCLK1Freq>
 8004260:	6178      	str	r0, [r7, #20]
        break;
 8004262:	e022      	b.n	80042aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <UART_SetConfig+0x300>)
 8004266:	617b      	str	r3, [r7, #20]
        break;
 8004268:	e01f      	b.n	80042aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426a:	f7fe ffd5 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 800426e:	6178      	str	r0, [r7, #20]
        break;
 8004270:	e01b      	b.n	80042aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004276:	617b      	str	r3, [r7, #20]
        break;
 8004278:	e017      	b.n	80042aa <UART_SetConfig+0x30e>
 800427a:	bf00      	nop
 800427c:	efff69f3 	.word	0xefff69f3
 8004280:	40008000 	.word	0x40008000
 8004284:	40013800 	.word	0x40013800
 8004288:	40021000 	.word	0x40021000
 800428c:	40004400 	.word	0x40004400
 8004290:	40004800 	.word	0x40004800
 8004294:	40004c00 	.word	0x40004c00
 8004298:	40005000 	.word	0x40005000
 800429c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	76bb      	strb	r3, [r7, #26]
        break;
 80042a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80f1 	beq.w	8004494 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	4413      	add	r3, r2
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d305      	bcc.n	80042ce <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d902      	bls.n	80042d4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	76bb      	strb	r3, [r7, #26]
 80042d2:	e0df      	b.n	8004494 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f04f 0100 	mov.w	r1, #0
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	020b      	lsls	r3, r1, #8
 80042e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80042ea:	0202      	lsls	r2, r0, #8
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	6849      	ldr	r1, [r1, #4]
 80042f0:	0849      	lsrs	r1, r1, #1
 80042f2:	4608      	mov	r0, r1
 80042f4:	f04f 0100 	mov.w	r1, #0
 80042f8:	1814      	adds	r4, r2, r0
 80042fa:	eb43 0501 	adc.w	r5, r3, r1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	461a      	mov	r2, r3
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	4620      	mov	r0, r4
 800430a:	4629      	mov	r1, r5
 800430c:	f7fb ffb8 	bl	8000280 <__aeabi_uldivmod>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4613      	mov	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800431e:	d308      	bcc.n	8004332 <UART_SetConfig+0x396>
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004326:	d204      	bcs.n	8004332 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	60da      	str	r2, [r3, #12]
 8004330:	e0b0      	b.n	8004494 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	76bb      	strb	r3, [r7, #26]
 8004336:	e0ad      	b.n	8004494 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004340:	d15c      	bne.n	80043fc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004342:	7efb      	ldrb	r3, [r7, #27]
 8004344:	2b08      	cmp	r3, #8
 8004346:	d828      	bhi.n	800439a <UART_SetConfig+0x3fe>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <UART_SetConfig+0x3b4>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004375 	.word	0x08004375
 8004354:	0800437d 	.word	0x0800437d
 8004358:	08004385 	.word	0x08004385
 800435c:	0800439b 	.word	0x0800439b
 8004360:	0800438b 	.word	0x0800438b
 8004364:	0800439b 	.word	0x0800439b
 8004368:	0800439b 	.word	0x0800439b
 800436c:	0800439b 	.word	0x0800439b
 8004370:	08004393 	.word	0x08004393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004374:	f7fe ffe8 	bl	8003348 <HAL_RCC_GetPCLK1Freq>
 8004378:	6178      	str	r0, [r7, #20]
        break;
 800437a:	e013      	b.n	80043a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800437c:	f7fe fffa 	bl	8003374 <HAL_RCC_GetPCLK2Freq>
 8004380:	6178      	str	r0, [r7, #20]
        break;
 8004382:	e00f      	b.n	80043a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004384:	4b49      	ldr	r3, [pc, #292]	; (80044ac <UART_SetConfig+0x510>)
 8004386:	617b      	str	r3, [r7, #20]
        break;
 8004388:	e00c      	b.n	80043a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800438a:	f7fe ff45 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 800438e:	6178      	str	r0, [r7, #20]
        break;
 8004390:	e008      	b.n	80043a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004396:	617b      	str	r3, [r7, #20]
        break;
 8004398:	e004      	b.n	80043a4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	76bb      	strb	r3, [r7, #26]
        break;
 80043a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d074      	beq.n	8004494 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	005a      	lsls	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	441a      	add	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	b29b      	uxth	r3, r3
 80043c0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b0f      	cmp	r3, #15
 80043c6:	d916      	bls.n	80043f6 <UART_SetConfig+0x45a>
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ce:	d212      	bcs.n	80043f6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f023 030f 	bic.w	r3, r3, #15
 80043d8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	085b      	lsrs	r3, r3, #1
 80043de:	b29b      	uxth	r3, r3
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	89fb      	ldrh	r3, [r7, #14]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	89fa      	ldrh	r2, [r7, #14]
 80043f2:	60da      	str	r2, [r3, #12]
 80043f4:	e04e      	b.n	8004494 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	76bb      	strb	r3, [r7, #26]
 80043fa:	e04b      	b.n	8004494 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043fc:	7efb      	ldrb	r3, [r7, #27]
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d827      	bhi.n	8004452 <UART_SetConfig+0x4b6>
 8004402:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <UART_SetConfig+0x46c>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004435 	.word	0x08004435
 8004410:	0800443d 	.word	0x0800443d
 8004414:	08004453 	.word	0x08004453
 8004418:	08004443 	.word	0x08004443
 800441c:	08004453 	.word	0x08004453
 8004420:	08004453 	.word	0x08004453
 8004424:	08004453 	.word	0x08004453
 8004428:	0800444b 	.word	0x0800444b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800442c:	f7fe ff8c 	bl	8003348 <HAL_RCC_GetPCLK1Freq>
 8004430:	6178      	str	r0, [r7, #20]
        break;
 8004432:	e013      	b.n	800445c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004434:	f7fe ff9e 	bl	8003374 <HAL_RCC_GetPCLK2Freq>
 8004438:	6178      	str	r0, [r7, #20]
        break;
 800443a:	e00f      	b.n	800445c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <UART_SetConfig+0x510>)
 800443e:	617b      	str	r3, [r7, #20]
        break;
 8004440:	e00c      	b.n	800445c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004442:	f7fe fee9 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 8004446:	6178      	str	r0, [r7, #20]
        break;
 8004448:	e008      	b.n	800445c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800444a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800444e:	617b      	str	r3, [r7, #20]
        break;
 8004450:	e004      	b.n	800445c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	76bb      	strb	r3, [r7, #26]
        break;
 800445a:	bf00      	nop
    }

    if (pclk != 0U)
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d018      	beq.n	8004494 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	085a      	lsrs	r2, r3, #1
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	441a      	add	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	b29b      	uxth	r3, r3
 8004476:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b0f      	cmp	r3, #15
 800447c:	d908      	bls.n	8004490 <UART_SetConfig+0x4f4>
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004484:	d204      	bcs.n	8004490 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	e001      	b.n	8004494 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044a0:	7ebb      	ldrb	r3, [r7, #26]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bdb0      	pop	{r4, r5, r7, pc}
 80044aa:	bf00      	nop
 80044ac:	00f42400 	.word	0x00f42400

080044b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01a      	beq.n	80045c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ae:	d10a      	bne.n	80045c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	605a      	str	r2, [r3, #4]
  }
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004604:	f7fc fc02 	bl	8000e0c <HAL_GetTick>
 8004608:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b08      	cmp	r3, #8
 8004616:	d10e      	bne.n	8004636 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004618:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f82d 	bl	8004686 <UART_WaitOnFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e023      	b.n	800467e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b04      	cmp	r3, #4
 8004642:	d10e      	bne.n	8004662 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f817 	bl	8004686 <UART_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e00d      	b.n	800467e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	603b      	str	r3, [r7, #0]
 8004692:	4613      	mov	r3, r2
 8004694:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004696:	e05e      	b.n	8004756 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469e:	d05a      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a0:	f7fc fbb4 	bl	8000e0c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d302      	bcc.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d11b      	bne.n	80046ee <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046c4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e043      	b.n	8004776 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d02c      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800470a:	d124      	bne.n	8004756 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004714:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004724:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0201 	bic.w	r2, r2, #1
 8004734:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2220      	movs	r2, #32
 8004746:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e00f      	b.n	8004776 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4013      	ands	r3, r2
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	429a      	cmp	r2, r3
 8004764:	bf0c      	ite	eq
 8004766:	2301      	moveq	r3, #1
 8004768:	2300      	movne	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	429a      	cmp	r2, r3
 8004772:	d091      	beq.n	8004698 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <__errno>:
 8004780:	4b01      	ldr	r3, [pc, #4]	; (8004788 <__errno+0x8>)
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000018 	.word	0x20000018

0800478c <__libc_init_array>:
 800478c:	b570      	push	{r4, r5, r6, lr}
 800478e:	4d0d      	ldr	r5, [pc, #52]	; (80047c4 <__libc_init_array+0x38>)
 8004790:	4c0d      	ldr	r4, [pc, #52]	; (80047c8 <__libc_init_array+0x3c>)
 8004792:	1b64      	subs	r4, r4, r5
 8004794:	10a4      	asrs	r4, r4, #2
 8004796:	2600      	movs	r6, #0
 8004798:	42a6      	cmp	r6, r4
 800479a:	d109      	bne.n	80047b0 <__libc_init_array+0x24>
 800479c:	4d0b      	ldr	r5, [pc, #44]	; (80047cc <__libc_init_array+0x40>)
 800479e:	4c0c      	ldr	r4, [pc, #48]	; (80047d0 <__libc_init_array+0x44>)
 80047a0:	f000 fc4e 	bl	8005040 <_init>
 80047a4:	1b64      	subs	r4, r4, r5
 80047a6:	10a4      	asrs	r4, r4, #2
 80047a8:	2600      	movs	r6, #0
 80047aa:	42a6      	cmp	r6, r4
 80047ac:	d105      	bne.n	80047ba <__libc_init_array+0x2e>
 80047ae:	bd70      	pop	{r4, r5, r6, pc}
 80047b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b4:	4798      	blx	r3
 80047b6:	3601      	adds	r6, #1
 80047b8:	e7ee      	b.n	8004798 <__libc_init_array+0xc>
 80047ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80047be:	4798      	blx	r3
 80047c0:	3601      	adds	r6, #1
 80047c2:	e7f2      	b.n	80047aa <__libc_init_array+0x1e>
 80047c4:	080050f0 	.word	0x080050f0
 80047c8:	080050f0 	.word	0x080050f0
 80047cc:	080050f0 	.word	0x080050f0
 80047d0:	080050f4 	.word	0x080050f4

080047d4 <memset>:
 80047d4:	4402      	add	r2, r0
 80047d6:	4603      	mov	r3, r0
 80047d8:	4293      	cmp	r3, r2
 80047da:	d100      	bne.n	80047de <memset+0xa>
 80047dc:	4770      	bx	lr
 80047de:	f803 1b01 	strb.w	r1, [r3], #1
 80047e2:	e7f9      	b.n	80047d8 <memset+0x4>

080047e4 <siprintf>:
 80047e4:	b40e      	push	{r1, r2, r3}
 80047e6:	b500      	push	{lr}
 80047e8:	b09c      	sub	sp, #112	; 0x70
 80047ea:	ab1d      	add	r3, sp, #116	; 0x74
 80047ec:	9002      	str	r0, [sp, #8]
 80047ee:	9006      	str	r0, [sp, #24]
 80047f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047f4:	4809      	ldr	r0, [pc, #36]	; (800481c <siprintf+0x38>)
 80047f6:	9107      	str	r1, [sp, #28]
 80047f8:	9104      	str	r1, [sp, #16]
 80047fa:	4909      	ldr	r1, [pc, #36]	; (8004820 <siprintf+0x3c>)
 80047fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004800:	9105      	str	r1, [sp, #20]
 8004802:	6800      	ldr	r0, [r0, #0]
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	a902      	add	r1, sp, #8
 8004808:	f000 f868 	bl	80048dc <_svfiprintf_r>
 800480c:	9b02      	ldr	r3, [sp, #8]
 800480e:	2200      	movs	r2, #0
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	b01c      	add	sp, #112	; 0x70
 8004814:	f85d eb04 	ldr.w	lr, [sp], #4
 8004818:	b003      	add	sp, #12
 800481a:	4770      	bx	lr
 800481c:	20000018 	.word	0x20000018
 8004820:	ffff0208 	.word	0xffff0208

08004824 <__ssputs_r>:
 8004824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004828:	688e      	ldr	r6, [r1, #8]
 800482a:	429e      	cmp	r6, r3
 800482c:	4682      	mov	sl, r0
 800482e:	460c      	mov	r4, r1
 8004830:	4690      	mov	r8, r2
 8004832:	461f      	mov	r7, r3
 8004834:	d838      	bhi.n	80048a8 <__ssputs_r+0x84>
 8004836:	898a      	ldrh	r2, [r1, #12]
 8004838:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800483c:	d032      	beq.n	80048a4 <__ssputs_r+0x80>
 800483e:	6825      	ldr	r5, [r4, #0]
 8004840:	6909      	ldr	r1, [r1, #16]
 8004842:	eba5 0901 	sub.w	r9, r5, r1
 8004846:	6965      	ldr	r5, [r4, #20]
 8004848:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800484c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004850:	3301      	adds	r3, #1
 8004852:	444b      	add	r3, r9
 8004854:	106d      	asrs	r5, r5, #1
 8004856:	429d      	cmp	r5, r3
 8004858:	bf38      	it	cc
 800485a:	461d      	movcc	r5, r3
 800485c:	0553      	lsls	r3, r2, #21
 800485e:	d531      	bpl.n	80048c4 <__ssputs_r+0xa0>
 8004860:	4629      	mov	r1, r5
 8004862:	f000 fb47 	bl	8004ef4 <_malloc_r>
 8004866:	4606      	mov	r6, r0
 8004868:	b950      	cbnz	r0, 8004880 <__ssputs_r+0x5c>
 800486a:	230c      	movs	r3, #12
 800486c:	f8ca 3000 	str.w	r3, [sl]
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004876:	81a3      	strh	r3, [r4, #12]
 8004878:	f04f 30ff 	mov.w	r0, #4294967295
 800487c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004880:	6921      	ldr	r1, [r4, #16]
 8004882:	464a      	mov	r2, r9
 8004884:	f000 fabe 	bl	8004e04 <memcpy>
 8004888:	89a3      	ldrh	r3, [r4, #12]
 800488a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800488e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004892:	81a3      	strh	r3, [r4, #12]
 8004894:	6126      	str	r6, [r4, #16]
 8004896:	6165      	str	r5, [r4, #20]
 8004898:	444e      	add	r6, r9
 800489a:	eba5 0509 	sub.w	r5, r5, r9
 800489e:	6026      	str	r6, [r4, #0]
 80048a0:	60a5      	str	r5, [r4, #8]
 80048a2:	463e      	mov	r6, r7
 80048a4:	42be      	cmp	r6, r7
 80048a6:	d900      	bls.n	80048aa <__ssputs_r+0x86>
 80048a8:	463e      	mov	r6, r7
 80048aa:	4632      	mov	r2, r6
 80048ac:	6820      	ldr	r0, [r4, #0]
 80048ae:	4641      	mov	r1, r8
 80048b0:	f000 fab6 	bl	8004e20 <memmove>
 80048b4:	68a3      	ldr	r3, [r4, #8]
 80048b6:	6822      	ldr	r2, [r4, #0]
 80048b8:	1b9b      	subs	r3, r3, r6
 80048ba:	4432      	add	r2, r6
 80048bc:	60a3      	str	r3, [r4, #8]
 80048be:	6022      	str	r2, [r4, #0]
 80048c0:	2000      	movs	r0, #0
 80048c2:	e7db      	b.n	800487c <__ssputs_r+0x58>
 80048c4:	462a      	mov	r2, r5
 80048c6:	f000 fb6f 	bl	8004fa8 <_realloc_r>
 80048ca:	4606      	mov	r6, r0
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d1e1      	bne.n	8004894 <__ssputs_r+0x70>
 80048d0:	6921      	ldr	r1, [r4, #16]
 80048d2:	4650      	mov	r0, sl
 80048d4:	f000 fabe 	bl	8004e54 <_free_r>
 80048d8:	e7c7      	b.n	800486a <__ssputs_r+0x46>
	...

080048dc <_svfiprintf_r>:
 80048dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e0:	4698      	mov	r8, r3
 80048e2:	898b      	ldrh	r3, [r1, #12]
 80048e4:	061b      	lsls	r3, r3, #24
 80048e6:	b09d      	sub	sp, #116	; 0x74
 80048e8:	4607      	mov	r7, r0
 80048ea:	460d      	mov	r5, r1
 80048ec:	4614      	mov	r4, r2
 80048ee:	d50e      	bpl.n	800490e <_svfiprintf_r+0x32>
 80048f0:	690b      	ldr	r3, [r1, #16]
 80048f2:	b963      	cbnz	r3, 800490e <_svfiprintf_r+0x32>
 80048f4:	2140      	movs	r1, #64	; 0x40
 80048f6:	f000 fafd 	bl	8004ef4 <_malloc_r>
 80048fa:	6028      	str	r0, [r5, #0]
 80048fc:	6128      	str	r0, [r5, #16]
 80048fe:	b920      	cbnz	r0, 800490a <_svfiprintf_r+0x2e>
 8004900:	230c      	movs	r3, #12
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	f04f 30ff 	mov.w	r0, #4294967295
 8004908:	e0d1      	b.n	8004aae <_svfiprintf_r+0x1d2>
 800490a:	2340      	movs	r3, #64	; 0x40
 800490c:	616b      	str	r3, [r5, #20]
 800490e:	2300      	movs	r3, #0
 8004910:	9309      	str	r3, [sp, #36]	; 0x24
 8004912:	2320      	movs	r3, #32
 8004914:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004918:	f8cd 800c 	str.w	r8, [sp, #12]
 800491c:	2330      	movs	r3, #48	; 0x30
 800491e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ac8 <_svfiprintf_r+0x1ec>
 8004922:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004926:	f04f 0901 	mov.w	r9, #1
 800492a:	4623      	mov	r3, r4
 800492c:	469a      	mov	sl, r3
 800492e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004932:	b10a      	cbz	r2, 8004938 <_svfiprintf_r+0x5c>
 8004934:	2a25      	cmp	r2, #37	; 0x25
 8004936:	d1f9      	bne.n	800492c <_svfiprintf_r+0x50>
 8004938:	ebba 0b04 	subs.w	fp, sl, r4
 800493c:	d00b      	beq.n	8004956 <_svfiprintf_r+0x7a>
 800493e:	465b      	mov	r3, fp
 8004940:	4622      	mov	r2, r4
 8004942:	4629      	mov	r1, r5
 8004944:	4638      	mov	r0, r7
 8004946:	f7ff ff6d 	bl	8004824 <__ssputs_r>
 800494a:	3001      	adds	r0, #1
 800494c:	f000 80aa 	beq.w	8004aa4 <_svfiprintf_r+0x1c8>
 8004950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004952:	445a      	add	r2, fp
 8004954:	9209      	str	r2, [sp, #36]	; 0x24
 8004956:	f89a 3000 	ldrb.w	r3, [sl]
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80a2 	beq.w	8004aa4 <_svfiprintf_r+0x1c8>
 8004960:	2300      	movs	r3, #0
 8004962:	f04f 32ff 	mov.w	r2, #4294967295
 8004966:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800496a:	f10a 0a01 	add.w	sl, sl, #1
 800496e:	9304      	str	r3, [sp, #16]
 8004970:	9307      	str	r3, [sp, #28]
 8004972:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004976:	931a      	str	r3, [sp, #104]	; 0x68
 8004978:	4654      	mov	r4, sl
 800497a:	2205      	movs	r2, #5
 800497c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004980:	4851      	ldr	r0, [pc, #324]	; (8004ac8 <_svfiprintf_r+0x1ec>)
 8004982:	f7fb fc2d 	bl	80001e0 <memchr>
 8004986:	9a04      	ldr	r2, [sp, #16]
 8004988:	b9d8      	cbnz	r0, 80049c2 <_svfiprintf_r+0xe6>
 800498a:	06d0      	lsls	r0, r2, #27
 800498c:	bf44      	itt	mi
 800498e:	2320      	movmi	r3, #32
 8004990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004994:	0711      	lsls	r1, r2, #28
 8004996:	bf44      	itt	mi
 8004998:	232b      	movmi	r3, #43	; 0x2b
 800499a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800499e:	f89a 3000 	ldrb.w	r3, [sl]
 80049a2:	2b2a      	cmp	r3, #42	; 0x2a
 80049a4:	d015      	beq.n	80049d2 <_svfiprintf_r+0xf6>
 80049a6:	9a07      	ldr	r2, [sp, #28]
 80049a8:	4654      	mov	r4, sl
 80049aa:	2000      	movs	r0, #0
 80049ac:	f04f 0c0a 	mov.w	ip, #10
 80049b0:	4621      	mov	r1, r4
 80049b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049b6:	3b30      	subs	r3, #48	; 0x30
 80049b8:	2b09      	cmp	r3, #9
 80049ba:	d94e      	bls.n	8004a5a <_svfiprintf_r+0x17e>
 80049bc:	b1b0      	cbz	r0, 80049ec <_svfiprintf_r+0x110>
 80049be:	9207      	str	r2, [sp, #28]
 80049c0:	e014      	b.n	80049ec <_svfiprintf_r+0x110>
 80049c2:	eba0 0308 	sub.w	r3, r0, r8
 80049c6:	fa09 f303 	lsl.w	r3, r9, r3
 80049ca:	4313      	orrs	r3, r2
 80049cc:	9304      	str	r3, [sp, #16]
 80049ce:	46a2      	mov	sl, r4
 80049d0:	e7d2      	b.n	8004978 <_svfiprintf_r+0x9c>
 80049d2:	9b03      	ldr	r3, [sp, #12]
 80049d4:	1d19      	adds	r1, r3, #4
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	9103      	str	r1, [sp, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	bfbb      	ittet	lt
 80049de:	425b      	neglt	r3, r3
 80049e0:	f042 0202 	orrlt.w	r2, r2, #2
 80049e4:	9307      	strge	r3, [sp, #28]
 80049e6:	9307      	strlt	r3, [sp, #28]
 80049e8:	bfb8      	it	lt
 80049ea:	9204      	strlt	r2, [sp, #16]
 80049ec:	7823      	ldrb	r3, [r4, #0]
 80049ee:	2b2e      	cmp	r3, #46	; 0x2e
 80049f0:	d10c      	bne.n	8004a0c <_svfiprintf_r+0x130>
 80049f2:	7863      	ldrb	r3, [r4, #1]
 80049f4:	2b2a      	cmp	r3, #42	; 0x2a
 80049f6:	d135      	bne.n	8004a64 <_svfiprintf_r+0x188>
 80049f8:	9b03      	ldr	r3, [sp, #12]
 80049fa:	1d1a      	adds	r2, r3, #4
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	9203      	str	r2, [sp, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bfb8      	it	lt
 8004a04:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a08:	3402      	adds	r4, #2
 8004a0a:	9305      	str	r3, [sp, #20]
 8004a0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ad8 <_svfiprintf_r+0x1fc>
 8004a10:	7821      	ldrb	r1, [r4, #0]
 8004a12:	2203      	movs	r2, #3
 8004a14:	4650      	mov	r0, sl
 8004a16:	f7fb fbe3 	bl	80001e0 <memchr>
 8004a1a:	b140      	cbz	r0, 8004a2e <_svfiprintf_r+0x152>
 8004a1c:	2340      	movs	r3, #64	; 0x40
 8004a1e:	eba0 000a 	sub.w	r0, r0, sl
 8004a22:	fa03 f000 	lsl.w	r0, r3, r0
 8004a26:	9b04      	ldr	r3, [sp, #16]
 8004a28:	4303      	orrs	r3, r0
 8004a2a:	3401      	adds	r4, #1
 8004a2c:	9304      	str	r3, [sp, #16]
 8004a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a32:	4826      	ldr	r0, [pc, #152]	; (8004acc <_svfiprintf_r+0x1f0>)
 8004a34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a38:	2206      	movs	r2, #6
 8004a3a:	f7fb fbd1 	bl	80001e0 <memchr>
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	d038      	beq.n	8004ab4 <_svfiprintf_r+0x1d8>
 8004a42:	4b23      	ldr	r3, [pc, #140]	; (8004ad0 <_svfiprintf_r+0x1f4>)
 8004a44:	bb1b      	cbnz	r3, 8004a8e <_svfiprintf_r+0x1b2>
 8004a46:	9b03      	ldr	r3, [sp, #12]
 8004a48:	3307      	adds	r3, #7
 8004a4a:	f023 0307 	bic.w	r3, r3, #7
 8004a4e:	3308      	adds	r3, #8
 8004a50:	9303      	str	r3, [sp, #12]
 8004a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a54:	4433      	add	r3, r6
 8004a56:	9309      	str	r3, [sp, #36]	; 0x24
 8004a58:	e767      	b.n	800492a <_svfiprintf_r+0x4e>
 8004a5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a5e:	460c      	mov	r4, r1
 8004a60:	2001      	movs	r0, #1
 8004a62:	e7a5      	b.n	80049b0 <_svfiprintf_r+0xd4>
 8004a64:	2300      	movs	r3, #0
 8004a66:	3401      	adds	r4, #1
 8004a68:	9305      	str	r3, [sp, #20]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f04f 0c0a 	mov.w	ip, #10
 8004a70:	4620      	mov	r0, r4
 8004a72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a76:	3a30      	subs	r2, #48	; 0x30
 8004a78:	2a09      	cmp	r2, #9
 8004a7a:	d903      	bls.n	8004a84 <_svfiprintf_r+0x1a8>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0c5      	beq.n	8004a0c <_svfiprintf_r+0x130>
 8004a80:	9105      	str	r1, [sp, #20]
 8004a82:	e7c3      	b.n	8004a0c <_svfiprintf_r+0x130>
 8004a84:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a88:	4604      	mov	r4, r0
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e7f0      	b.n	8004a70 <_svfiprintf_r+0x194>
 8004a8e:	ab03      	add	r3, sp, #12
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	462a      	mov	r2, r5
 8004a94:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <_svfiprintf_r+0x1f8>)
 8004a96:	a904      	add	r1, sp, #16
 8004a98:	4638      	mov	r0, r7
 8004a9a:	f3af 8000 	nop.w
 8004a9e:	1c42      	adds	r2, r0, #1
 8004aa0:	4606      	mov	r6, r0
 8004aa2:	d1d6      	bne.n	8004a52 <_svfiprintf_r+0x176>
 8004aa4:	89ab      	ldrh	r3, [r5, #12]
 8004aa6:	065b      	lsls	r3, r3, #25
 8004aa8:	f53f af2c 	bmi.w	8004904 <_svfiprintf_r+0x28>
 8004aac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aae:	b01d      	add	sp, #116	; 0x74
 8004ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab4:	ab03      	add	r3, sp, #12
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	462a      	mov	r2, r5
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <_svfiprintf_r+0x1f8>)
 8004abc:	a904      	add	r1, sp, #16
 8004abe:	4638      	mov	r0, r7
 8004ac0:	f000 f87a 	bl	8004bb8 <_printf_i>
 8004ac4:	e7eb      	b.n	8004a9e <_svfiprintf_r+0x1c2>
 8004ac6:	bf00      	nop
 8004ac8:	080050b4 	.word	0x080050b4
 8004acc:	080050be 	.word	0x080050be
 8004ad0:	00000000 	.word	0x00000000
 8004ad4:	08004825 	.word	0x08004825
 8004ad8:	080050ba 	.word	0x080050ba

08004adc <_printf_common>:
 8004adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae0:	4616      	mov	r6, r2
 8004ae2:	4699      	mov	r9, r3
 8004ae4:	688a      	ldr	r2, [r1, #8]
 8004ae6:	690b      	ldr	r3, [r1, #16]
 8004ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aec:	4293      	cmp	r3, r2
 8004aee:	bfb8      	it	lt
 8004af0:	4613      	movlt	r3, r2
 8004af2:	6033      	str	r3, [r6, #0]
 8004af4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004af8:	4607      	mov	r7, r0
 8004afa:	460c      	mov	r4, r1
 8004afc:	b10a      	cbz	r2, 8004b02 <_printf_common+0x26>
 8004afe:	3301      	adds	r3, #1
 8004b00:	6033      	str	r3, [r6, #0]
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	0699      	lsls	r1, r3, #26
 8004b06:	bf42      	ittt	mi
 8004b08:	6833      	ldrmi	r3, [r6, #0]
 8004b0a:	3302      	addmi	r3, #2
 8004b0c:	6033      	strmi	r3, [r6, #0]
 8004b0e:	6825      	ldr	r5, [r4, #0]
 8004b10:	f015 0506 	ands.w	r5, r5, #6
 8004b14:	d106      	bne.n	8004b24 <_printf_common+0x48>
 8004b16:	f104 0a19 	add.w	sl, r4, #25
 8004b1a:	68e3      	ldr	r3, [r4, #12]
 8004b1c:	6832      	ldr	r2, [r6, #0]
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	42ab      	cmp	r3, r5
 8004b22:	dc26      	bgt.n	8004b72 <_printf_common+0x96>
 8004b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b28:	1e13      	subs	r3, r2, #0
 8004b2a:	6822      	ldr	r2, [r4, #0]
 8004b2c:	bf18      	it	ne
 8004b2e:	2301      	movne	r3, #1
 8004b30:	0692      	lsls	r2, r2, #26
 8004b32:	d42b      	bmi.n	8004b8c <_printf_common+0xb0>
 8004b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b38:	4649      	mov	r1, r9
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	47c0      	blx	r8
 8004b3e:	3001      	adds	r0, #1
 8004b40:	d01e      	beq.n	8004b80 <_printf_common+0xa4>
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	68e5      	ldr	r5, [r4, #12]
 8004b46:	6832      	ldr	r2, [r6, #0]
 8004b48:	f003 0306 	and.w	r3, r3, #6
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	bf08      	it	eq
 8004b50:	1aad      	subeq	r5, r5, r2
 8004b52:	68a3      	ldr	r3, [r4, #8]
 8004b54:	6922      	ldr	r2, [r4, #16]
 8004b56:	bf0c      	ite	eq
 8004b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b5c:	2500      	movne	r5, #0
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	bfc4      	itt	gt
 8004b62:	1a9b      	subgt	r3, r3, r2
 8004b64:	18ed      	addgt	r5, r5, r3
 8004b66:	2600      	movs	r6, #0
 8004b68:	341a      	adds	r4, #26
 8004b6a:	42b5      	cmp	r5, r6
 8004b6c:	d11a      	bne.n	8004ba4 <_printf_common+0xc8>
 8004b6e:	2000      	movs	r0, #0
 8004b70:	e008      	b.n	8004b84 <_printf_common+0xa8>
 8004b72:	2301      	movs	r3, #1
 8004b74:	4652      	mov	r2, sl
 8004b76:	4649      	mov	r1, r9
 8004b78:	4638      	mov	r0, r7
 8004b7a:	47c0      	blx	r8
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d103      	bne.n	8004b88 <_printf_common+0xac>
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b88:	3501      	adds	r5, #1
 8004b8a:	e7c6      	b.n	8004b1a <_printf_common+0x3e>
 8004b8c:	18e1      	adds	r1, r4, r3
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	2030      	movs	r0, #48	; 0x30
 8004b92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b96:	4422      	add	r2, r4
 8004b98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	e7c7      	b.n	8004b34 <_printf_common+0x58>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	4622      	mov	r2, r4
 8004ba8:	4649      	mov	r1, r9
 8004baa:	4638      	mov	r0, r7
 8004bac:	47c0      	blx	r8
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d0e6      	beq.n	8004b80 <_printf_common+0xa4>
 8004bb2:	3601      	adds	r6, #1
 8004bb4:	e7d9      	b.n	8004b6a <_printf_common+0x8e>
	...

08004bb8 <_printf_i>:
 8004bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	4691      	mov	r9, r2
 8004bc0:	7e27      	ldrb	r7, [r4, #24]
 8004bc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004bc4:	2f78      	cmp	r7, #120	; 0x78
 8004bc6:	4680      	mov	r8, r0
 8004bc8:	469a      	mov	sl, r3
 8004bca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bce:	d807      	bhi.n	8004be0 <_printf_i+0x28>
 8004bd0:	2f62      	cmp	r7, #98	; 0x62
 8004bd2:	d80a      	bhi.n	8004bea <_printf_i+0x32>
 8004bd4:	2f00      	cmp	r7, #0
 8004bd6:	f000 80d8 	beq.w	8004d8a <_printf_i+0x1d2>
 8004bda:	2f58      	cmp	r7, #88	; 0x58
 8004bdc:	f000 80a3 	beq.w	8004d26 <_printf_i+0x16e>
 8004be0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004be8:	e03a      	b.n	8004c60 <_printf_i+0xa8>
 8004bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bee:	2b15      	cmp	r3, #21
 8004bf0:	d8f6      	bhi.n	8004be0 <_printf_i+0x28>
 8004bf2:	a001      	add	r0, pc, #4	; (adr r0, 8004bf8 <_printf_i+0x40>)
 8004bf4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004bf8:	08004c51 	.word	0x08004c51
 8004bfc:	08004c65 	.word	0x08004c65
 8004c00:	08004be1 	.word	0x08004be1
 8004c04:	08004be1 	.word	0x08004be1
 8004c08:	08004be1 	.word	0x08004be1
 8004c0c:	08004be1 	.word	0x08004be1
 8004c10:	08004c65 	.word	0x08004c65
 8004c14:	08004be1 	.word	0x08004be1
 8004c18:	08004be1 	.word	0x08004be1
 8004c1c:	08004be1 	.word	0x08004be1
 8004c20:	08004be1 	.word	0x08004be1
 8004c24:	08004d71 	.word	0x08004d71
 8004c28:	08004c95 	.word	0x08004c95
 8004c2c:	08004d53 	.word	0x08004d53
 8004c30:	08004be1 	.word	0x08004be1
 8004c34:	08004be1 	.word	0x08004be1
 8004c38:	08004d93 	.word	0x08004d93
 8004c3c:	08004be1 	.word	0x08004be1
 8004c40:	08004c95 	.word	0x08004c95
 8004c44:	08004be1 	.word	0x08004be1
 8004c48:	08004be1 	.word	0x08004be1
 8004c4c:	08004d5b 	.word	0x08004d5b
 8004c50:	680b      	ldr	r3, [r1, #0]
 8004c52:	1d1a      	adds	r2, r3, #4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	600a      	str	r2, [r1, #0]
 8004c58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0a3      	b.n	8004dac <_printf_i+0x1f4>
 8004c64:	6825      	ldr	r5, [r4, #0]
 8004c66:	6808      	ldr	r0, [r1, #0]
 8004c68:	062e      	lsls	r6, r5, #24
 8004c6a:	f100 0304 	add.w	r3, r0, #4
 8004c6e:	d50a      	bpl.n	8004c86 <_printf_i+0xce>
 8004c70:	6805      	ldr	r5, [r0, #0]
 8004c72:	600b      	str	r3, [r1, #0]
 8004c74:	2d00      	cmp	r5, #0
 8004c76:	da03      	bge.n	8004c80 <_printf_i+0xc8>
 8004c78:	232d      	movs	r3, #45	; 0x2d
 8004c7a:	426d      	negs	r5, r5
 8004c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c80:	485e      	ldr	r0, [pc, #376]	; (8004dfc <_printf_i+0x244>)
 8004c82:	230a      	movs	r3, #10
 8004c84:	e019      	b.n	8004cba <_printf_i+0x102>
 8004c86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c8a:	6805      	ldr	r5, [r0, #0]
 8004c8c:	600b      	str	r3, [r1, #0]
 8004c8e:	bf18      	it	ne
 8004c90:	b22d      	sxthne	r5, r5
 8004c92:	e7ef      	b.n	8004c74 <_printf_i+0xbc>
 8004c94:	680b      	ldr	r3, [r1, #0]
 8004c96:	6825      	ldr	r5, [r4, #0]
 8004c98:	1d18      	adds	r0, r3, #4
 8004c9a:	6008      	str	r0, [r1, #0]
 8004c9c:	0628      	lsls	r0, r5, #24
 8004c9e:	d501      	bpl.n	8004ca4 <_printf_i+0xec>
 8004ca0:	681d      	ldr	r5, [r3, #0]
 8004ca2:	e002      	b.n	8004caa <_printf_i+0xf2>
 8004ca4:	0669      	lsls	r1, r5, #25
 8004ca6:	d5fb      	bpl.n	8004ca0 <_printf_i+0xe8>
 8004ca8:	881d      	ldrh	r5, [r3, #0]
 8004caa:	4854      	ldr	r0, [pc, #336]	; (8004dfc <_printf_i+0x244>)
 8004cac:	2f6f      	cmp	r7, #111	; 0x6f
 8004cae:	bf0c      	ite	eq
 8004cb0:	2308      	moveq	r3, #8
 8004cb2:	230a      	movne	r3, #10
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cba:	6866      	ldr	r6, [r4, #4]
 8004cbc:	60a6      	str	r6, [r4, #8]
 8004cbe:	2e00      	cmp	r6, #0
 8004cc0:	bfa2      	ittt	ge
 8004cc2:	6821      	ldrge	r1, [r4, #0]
 8004cc4:	f021 0104 	bicge.w	r1, r1, #4
 8004cc8:	6021      	strge	r1, [r4, #0]
 8004cca:	b90d      	cbnz	r5, 8004cd0 <_printf_i+0x118>
 8004ccc:	2e00      	cmp	r6, #0
 8004cce:	d04d      	beq.n	8004d6c <_printf_i+0x1b4>
 8004cd0:	4616      	mov	r6, r2
 8004cd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cd6:	fb03 5711 	mls	r7, r3, r1, r5
 8004cda:	5dc7      	ldrb	r7, [r0, r7]
 8004cdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ce0:	462f      	mov	r7, r5
 8004ce2:	42bb      	cmp	r3, r7
 8004ce4:	460d      	mov	r5, r1
 8004ce6:	d9f4      	bls.n	8004cd2 <_printf_i+0x11a>
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d10b      	bne.n	8004d04 <_printf_i+0x14c>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	07df      	lsls	r7, r3, #31
 8004cf0:	d508      	bpl.n	8004d04 <_printf_i+0x14c>
 8004cf2:	6923      	ldr	r3, [r4, #16]
 8004cf4:	6861      	ldr	r1, [r4, #4]
 8004cf6:	4299      	cmp	r1, r3
 8004cf8:	bfde      	ittt	le
 8004cfa:	2330      	movle	r3, #48	; 0x30
 8004cfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d04:	1b92      	subs	r2, r2, r6
 8004d06:	6122      	str	r2, [r4, #16]
 8004d08:	f8cd a000 	str.w	sl, [sp]
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	aa03      	add	r2, sp, #12
 8004d10:	4621      	mov	r1, r4
 8004d12:	4640      	mov	r0, r8
 8004d14:	f7ff fee2 	bl	8004adc <_printf_common>
 8004d18:	3001      	adds	r0, #1
 8004d1a:	d14c      	bne.n	8004db6 <_printf_i+0x1fe>
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d20:	b004      	add	sp, #16
 8004d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d26:	4835      	ldr	r0, [pc, #212]	; (8004dfc <_printf_i+0x244>)
 8004d28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	680e      	ldr	r6, [r1, #0]
 8004d30:	061f      	lsls	r7, r3, #24
 8004d32:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d36:	600e      	str	r6, [r1, #0]
 8004d38:	d514      	bpl.n	8004d64 <_printf_i+0x1ac>
 8004d3a:	07d9      	lsls	r1, r3, #31
 8004d3c:	bf44      	itt	mi
 8004d3e:	f043 0320 	orrmi.w	r3, r3, #32
 8004d42:	6023      	strmi	r3, [r4, #0]
 8004d44:	b91d      	cbnz	r5, 8004d4e <_printf_i+0x196>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	f023 0320 	bic.w	r3, r3, #32
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	2310      	movs	r3, #16
 8004d50:	e7b0      	b.n	8004cb4 <_printf_i+0xfc>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	f043 0320 	orr.w	r3, r3, #32
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	2378      	movs	r3, #120	; 0x78
 8004d5c:	4828      	ldr	r0, [pc, #160]	; (8004e00 <_printf_i+0x248>)
 8004d5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d62:	e7e3      	b.n	8004d2c <_printf_i+0x174>
 8004d64:	065e      	lsls	r6, r3, #25
 8004d66:	bf48      	it	mi
 8004d68:	b2ad      	uxthmi	r5, r5
 8004d6a:	e7e6      	b.n	8004d3a <_printf_i+0x182>
 8004d6c:	4616      	mov	r6, r2
 8004d6e:	e7bb      	b.n	8004ce8 <_printf_i+0x130>
 8004d70:	680b      	ldr	r3, [r1, #0]
 8004d72:	6826      	ldr	r6, [r4, #0]
 8004d74:	6960      	ldr	r0, [r4, #20]
 8004d76:	1d1d      	adds	r5, r3, #4
 8004d78:	600d      	str	r5, [r1, #0]
 8004d7a:	0635      	lsls	r5, r6, #24
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	d501      	bpl.n	8004d84 <_printf_i+0x1cc>
 8004d80:	6018      	str	r0, [r3, #0]
 8004d82:	e002      	b.n	8004d8a <_printf_i+0x1d2>
 8004d84:	0671      	lsls	r1, r6, #25
 8004d86:	d5fb      	bpl.n	8004d80 <_printf_i+0x1c8>
 8004d88:	8018      	strh	r0, [r3, #0]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6123      	str	r3, [r4, #16]
 8004d8e:	4616      	mov	r6, r2
 8004d90:	e7ba      	b.n	8004d08 <_printf_i+0x150>
 8004d92:	680b      	ldr	r3, [r1, #0]
 8004d94:	1d1a      	adds	r2, r3, #4
 8004d96:	600a      	str	r2, [r1, #0]
 8004d98:	681e      	ldr	r6, [r3, #0]
 8004d9a:	6862      	ldr	r2, [r4, #4]
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	4630      	mov	r0, r6
 8004da0:	f7fb fa1e 	bl	80001e0 <memchr>
 8004da4:	b108      	cbz	r0, 8004daa <_printf_i+0x1f2>
 8004da6:	1b80      	subs	r0, r0, r6
 8004da8:	6060      	str	r0, [r4, #4]
 8004daa:	6863      	ldr	r3, [r4, #4]
 8004dac:	6123      	str	r3, [r4, #16]
 8004dae:	2300      	movs	r3, #0
 8004db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004db4:	e7a8      	b.n	8004d08 <_printf_i+0x150>
 8004db6:	6923      	ldr	r3, [r4, #16]
 8004db8:	4632      	mov	r2, r6
 8004dba:	4649      	mov	r1, r9
 8004dbc:	4640      	mov	r0, r8
 8004dbe:	47d0      	blx	sl
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d0ab      	beq.n	8004d1c <_printf_i+0x164>
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	079b      	lsls	r3, r3, #30
 8004dc8:	d413      	bmi.n	8004df2 <_printf_i+0x23a>
 8004dca:	68e0      	ldr	r0, [r4, #12]
 8004dcc:	9b03      	ldr	r3, [sp, #12]
 8004dce:	4298      	cmp	r0, r3
 8004dd0:	bfb8      	it	lt
 8004dd2:	4618      	movlt	r0, r3
 8004dd4:	e7a4      	b.n	8004d20 <_printf_i+0x168>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4632      	mov	r2, r6
 8004dda:	4649      	mov	r1, r9
 8004ddc:	4640      	mov	r0, r8
 8004dde:	47d0      	blx	sl
 8004de0:	3001      	adds	r0, #1
 8004de2:	d09b      	beq.n	8004d1c <_printf_i+0x164>
 8004de4:	3501      	adds	r5, #1
 8004de6:	68e3      	ldr	r3, [r4, #12]
 8004de8:	9903      	ldr	r1, [sp, #12]
 8004dea:	1a5b      	subs	r3, r3, r1
 8004dec:	42ab      	cmp	r3, r5
 8004dee:	dcf2      	bgt.n	8004dd6 <_printf_i+0x21e>
 8004df0:	e7eb      	b.n	8004dca <_printf_i+0x212>
 8004df2:	2500      	movs	r5, #0
 8004df4:	f104 0619 	add.w	r6, r4, #25
 8004df8:	e7f5      	b.n	8004de6 <_printf_i+0x22e>
 8004dfa:	bf00      	nop
 8004dfc:	080050c5 	.word	0x080050c5
 8004e00:	080050d6 	.word	0x080050d6

08004e04 <memcpy>:
 8004e04:	440a      	add	r2, r1
 8004e06:	4291      	cmp	r1, r2
 8004e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e0c:	d100      	bne.n	8004e10 <memcpy+0xc>
 8004e0e:	4770      	bx	lr
 8004e10:	b510      	push	{r4, lr}
 8004e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e1a:	4291      	cmp	r1, r2
 8004e1c:	d1f9      	bne.n	8004e12 <memcpy+0xe>
 8004e1e:	bd10      	pop	{r4, pc}

08004e20 <memmove>:
 8004e20:	4288      	cmp	r0, r1
 8004e22:	b510      	push	{r4, lr}
 8004e24:	eb01 0402 	add.w	r4, r1, r2
 8004e28:	d902      	bls.n	8004e30 <memmove+0x10>
 8004e2a:	4284      	cmp	r4, r0
 8004e2c:	4623      	mov	r3, r4
 8004e2e:	d807      	bhi.n	8004e40 <memmove+0x20>
 8004e30:	1e43      	subs	r3, r0, #1
 8004e32:	42a1      	cmp	r1, r4
 8004e34:	d008      	beq.n	8004e48 <memmove+0x28>
 8004e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e3e:	e7f8      	b.n	8004e32 <memmove+0x12>
 8004e40:	4402      	add	r2, r0
 8004e42:	4601      	mov	r1, r0
 8004e44:	428a      	cmp	r2, r1
 8004e46:	d100      	bne.n	8004e4a <memmove+0x2a>
 8004e48:	bd10      	pop	{r4, pc}
 8004e4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e52:	e7f7      	b.n	8004e44 <memmove+0x24>

08004e54 <_free_r>:
 8004e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e56:	2900      	cmp	r1, #0
 8004e58:	d048      	beq.n	8004eec <_free_r+0x98>
 8004e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e5e:	9001      	str	r0, [sp, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f1a1 0404 	sub.w	r4, r1, #4
 8004e66:	bfb8      	it	lt
 8004e68:	18e4      	addlt	r4, r4, r3
 8004e6a:	f000 f8d3 	bl	8005014 <__malloc_lock>
 8004e6e:	4a20      	ldr	r2, [pc, #128]	; (8004ef0 <_free_r+0x9c>)
 8004e70:	9801      	ldr	r0, [sp, #4]
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	4615      	mov	r5, r2
 8004e76:	b933      	cbnz	r3, 8004e86 <_free_r+0x32>
 8004e78:	6063      	str	r3, [r4, #4]
 8004e7a:	6014      	str	r4, [r2, #0]
 8004e7c:	b003      	add	sp, #12
 8004e7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e82:	f000 b8cd 	b.w	8005020 <__malloc_unlock>
 8004e86:	42a3      	cmp	r3, r4
 8004e88:	d90b      	bls.n	8004ea2 <_free_r+0x4e>
 8004e8a:	6821      	ldr	r1, [r4, #0]
 8004e8c:	1862      	adds	r2, r4, r1
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	bf04      	itt	eq
 8004e92:	681a      	ldreq	r2, [r3, #0]
 8004e94:	685b      	ldreq	r3, [r3, #4]
 8004e96:	6063      	str	r3, [r4, #4]
 8004e98:	bf04      	itt	eq
 8004e9a:	1852      	addeq	r2, r2, r1
 8004e9c:	6022      	streq	r2, [r4, #0]
 8004e9e:	602c      	str	r4, [r5, #0]
 8004ea0:	e7ec      	b.n	8004e7c <_free_r+0x28>
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	b10b      	cbz	r3, 8004eac <_free_r+0x58>
 8004ea8:	42a3      	cmp	r3, r4
 8004eaa:	d9fa      	bls.n	8004ea2 <_free_r+0x4e>
 8004eac:	6811      	ldr	r1, [r2, #0]
 8004eae:	1855      	adds	r5, r2, r1
 8004eb0:	42a5      	cmp	r5, r4
 8004eb2:	d10b      	bne.n	8004ecc <_free_r+0x78>
 8004eb4:	6824      	ldr	r4, [r4, #0]
 8004eb6:	4421      	add	r1, r4
 8004eb8:	1854      	adds	r4, r2, r1
 8004eba:	42a3      	cmp	r3, r4
 8004ebc:	6011      	str	r1, [r2, #0]
 8004ebe:	d1dd      	bne.n	8004e7c <_free_r+0x28>
 8004ec0:	681c      	ldr	r4, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	6053      	str	r3, [r2, #4]
 8004ec6:	4421      	add	r1, r4
 8004ec8:	6011      	str	r1, [r2, #0]
 8004eca:	e7d7      	b.n	8004e7c <_free_r+0x28>
 8004ecc:	d902      	bls.n	8004ed4 <_free_r+0x80>
 8004ece:	230c      	movs	r3, #12
 8004ed0:	6003      	str	r3, [r0, #0]
 8004ed2:	e7d3      	b.n	8004e7c <_free_r+0x28>
 8004ed4:	6825      	ldr	r5, [r4, #0]
 8004ed6:	1961      	adds	r1, r4, r5
 8004ed8:	428b      	cmp	r3, r1
 8004eda:	bf04      	itt	eq
 8004edc:	6819      	ldreq	r1, [r3, #0]
 8004ede:	685b      	ldreq	r3, [r3, #4]
 8004ee0:	6063      	str	r3, [r4, #4]
 8004ee2:	bf04      	itt	eq
 8004ee4:	1949      	addeq	r1, r1, r5
 8004ee6:	6021      	streq	r1, [r4, #0]
 8004ee8:	6054      	str	r4, [r2, #4]
 8004eea:	e7c7      	b.n	8004e7c <_free_r+0x28>
 8004eec:	b003      	add	sp, #12
 8004eee:	bd30      	pop	{r4, r5, pc}
 8004ef0:	200000a0 	.word	0x200000a0

08004ef4 <_malloc_r>:
 8004ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef6:	1ccd      	adds	r5, r1, #3
 8004ef8:	f025 0503 	bic.w	r5, r5, #3
 8004efc:	3508      	adds	r5, #8
 8004efe:	2d0c      	cmp	r5, #12
 8004f00:	bf38      	it	cc
 8004f02:	250c      	movcc	r5, #12
 8004f04:	2d00      	cmp	r5, #0
 8004f06:	4606      	mov	r6, r0
 8004f08:	db01      	blt.n	8004f0e <_malloc_r+0x1a>
 8004f0a:	42a9      	cmp	r1, r5
 8004f0c:	d903      	bls.n	8004f16 <_malloc_r+0x22>
 8004f0e:	230c      	movs	r3, #12
 8004f10:	6033      	str	r3, [r6, #0]
 8004f12:	2000      	movs	r0, #0
 8004f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f16:	f000 f87d 	bl	8005014 <__malloc_lock>
 8004f1a:	4921      	ldr	r1, [pc, #132]	; (8004fa0 <_malloc_r+0xac>)
 8004f1c:	680a      	ldr	r2, [r1, #0]
 8004f1e:	4614      	mov	r4, r2
 8004f20:	b99c      	cbnz	r4, 8004f4a <_malloc_r+0x56>
 8004f22:	4f20      	ldr	r7, [pc, #128]	; (8004fa4 <_malloc_r+0xb0>)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	b923      	cbnz	r3, 8004f32 <_malloc_r+0x3e>
 8004f28:	4621      	mov	r1, r4
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	f000 f862 	bl	8004ff4 <_sbrk_r>
 8004f30:	6038      	str	r0, [r7, #0]
 8004f32:	4629      	mov	r1, r5
 8004f34:	4630      	mov	r0, r6
 8004f36:	f000 f85d 	bl	8004ff4 <_sbrk_r>
 8004f3a:	1c43      	adds	r3, r0, #1
 8004f3c:	d123      	bne.n	8004f86 <_malloc_r+0x92>
 8004f3e:	230c      	movs	r3, #12
 8004f40:	6033      	str	r3, [r6, #0]
 8004f42:	4630      	mov	r0, r6
 8004f44:	f000 f86c 	bl	8005020 <__malloc_unlock>
 8004f48:	e7e3      	b.n	8004f12 <_malloc_r+0x1e>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	1b5b      	subs	r3, r3, r5
 8004f4e:	d417      	bmi.n	8004f80 <_malloc_r+0x8c>
 8004f50:	2b0b      	cmp	r3, #11
 8004f52:	d903      	bls.n	8004f5c <_malloc_r+0x68>
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	441c      	add	r4, r3
 8004f58:	6025      	str	r5, [r4, #0]
 8004f5a:	e004      	b.n	8004f66 <_malloc_r+0x72>
 8004f5c:	6863      	ldr	r3, [r4, #4]
 8004f5e:	42a2      	cmp	r2, r4
 8004f60:	bf0c      	ite	eq
 8004f62:	600b      	streq	r3, [r1, #0]
 8004f64:	6053      	strne	r3, [r2, #4]
 8004f66:	4630      	mov	r0, r6
 8004f68:	f000 f85a 	bl	8005020 <__malloc_unlock>
 8004f6c:	f104 000b 	add.w	r0, r4, #11
 8004f70:	1d23      	adds	r3, r4, #4
 8004f72:	f020 0007 	bic.w	r0, r0, #7
 8004f76:	1ac2      	subs	r2, r0, r3
 8004f78:	d0cc      	beq.n	8004f14 <_malloc_r+0x20>
 8004f7a:	1a1b      	subs	r3, r3, r0
 8004f7c:	50a3      	str	r3, [r4, r2]
 8004f7e:	e7c9      	b.n	8004f14 <_malloc_r+0x20>
 8004f80:	4622      	mov	r2, r4
 8004f82:	6864      	ldr	r4, [r4, #4]
 8004f84:	e7cc      	b.n	8004f20 <_malloc_r+0x2c>
 8004f86:	1cc4      	adds	r4, r0, #3
 8004f88:	f024 0403 	bic.w	r4, r4, #3
 8004f8c:	42a0      	cmp	r0, r4
 8004f8e:	d0e3      	beq.n	8004f58 <_malloc_r+0x64>
 8004f90:	1a21      	subs	r1, r4, r0
 8004f92:	4630      	mov	r0, r6
 8004f94:	f000 f82e 	bl	8004ff4 <_sbrk_r>
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d1dd      	bne.n	8004f58 <_malloc_r+0x64>
 8004f9c:	e7cf      	b.n	8004f3e <_malloc_r+0x4a>
 8004f9e:	bf00      	nop
 8004fa0:	200000a0 	.word	0x200000a0
 8004fa4:	200000a4 	.word	0x200000a4

08004fa8 <_realloc_r>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	4607      	mov	r7, r0
 8004fac:	4614      	mov	r4, r2
 8004fae:	460e      	mov	r6, r1
 8004fb0:	b921      	cbnz	r1, 8004fbc <_realloc_r+0x14>
 8004fb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	f7ff bf9c 	b.w	8004ef4 <_malloc_r>
 8004fbc:	b922      	cbnz	r2, 8004fc8 <_realloc_r+0x20>
 8004fbe:	f7ff ff49 	bl	8004e54 <_free_r>
 8004fc2:	4625      	mov	r5, r4
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fc8:	f000 f830 	bl	800502c <_malloc_usable_size_r>
 8004fcc:	42a0      	cmp	r0, r4
 8004fce:	d20f      	bcs.n	8004ff0 <_realloc_r+0x48>
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	4638      	mov	r0, r7
 8004fd4:	f7ff ff8e 	bl	8004ef4 <_malloc_r>
 8004fd8:	4605      	mov	r5, r0
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d0f2      	beq.n	8004fc4 <_realloc_r+0x1c>
 8004fde:	4631      	mov	r1, r6
 8004fe0:	4622      	mov	r2, r4
 8004fe2:	f7ff ff0f 	bl	8004e04 <memcpy>
 8004fe6:	4631      	mov	r1, r6
 8004fe8:	4638      	mov	r0, r7
 8004fea:	f7ff ff33 	bl	8004e54 <_free_r>
 8004fee:	e7e9      	b.n	8004fc4 <_realloc_r+0x1c>
 8004ff0:	4635      	mov	r5, r6
 8004ff2:	e7e7      	b.n	8004fc4 <_realloc_r+0x1c>

08004ff4 <_sbrk_r>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	4d06      	ldr	r5, [pc, #24]	; (8005010 <_sbrk_r+0x1c>)
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	602b      	str	r3, [r5, #0]
 8005000:	f7fb fd98 	bl	8000b34 <_sbrk>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	d102      	bne.n	800500e <_sbrk_r+0x1a>
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	b103      	cbz	r3, 800500e <_sbrk_r+0x1a>
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	bd38      	pop	{r3, r4, r5, pc}
 8005010:	20000194 	.word	0x20000194

08005014 <__malloc_lock>:
 8005014:	4801      	ldr	r0, [pc, #4]	; (800501c <__malloc_lock+0x8>)
 8005016:	f000 b811 	b.w	800503c <__retarget_lock_acquire_recursive>
 800501a:	bf00      	nop
 800501c:	2000019c 	.word	0x2000019c

08005020 <__malloc_unlock>:
 8005020:	4801      	ldr	r0, [pc, #4]	; (8005028 <__malloc_unlock+0x8>)
 8005022:	f000 b80c 	b.w	800503e <__retarget_lock_release_recursive>
 8005026:	bf00      	nop
 8005028:	2000019c 	.word	0x2000019c

0800502c <_malloc_usable_size_r>:
 800502c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005030:	1f18      	subs	r0, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	bfbc      	itt	lt
 8005036:	580b      	ldrlt	r3, [r1, r0]
 8005038:	18c0      	addlt	r0, r0, r3
 800503a:	4770      	bx	lr

0800503c <__retarget_lock_acquire_recursive>:
 800503c:	4770      	bx	lr

0800503e <__retarget_lock_release_recursive>:
 800503e:	4770      	bx	lr

08005040 <_init>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	bf00      	nop
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr

0800504c <_fini>:
 800504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504e:	bf00      	nop
 8005050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005052:	bc08      	pop	{r3}
 8005054:	469e      	mov	lr, r3
 8005056:	4770      	bx	lr
